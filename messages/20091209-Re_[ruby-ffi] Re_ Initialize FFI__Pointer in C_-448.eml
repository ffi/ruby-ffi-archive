Delivered-To: headius@headius.com
Received: by 10.114.184.4 with SMTP id h4cs733097waf;
        Wed, 9 Dec 2009 12:29:10 -0800 (PST)
Received: by 10.115.151.5 with SMTP id d5mr1038162wao.204.1260390550675;
        Wed, 09 Dec 2009 12:29:10 -0800 (PST)
Return-Path: <3lQggSwkJCAk5vnr11wn0pvjru.lxv03k7-oorpxxpunp0x3y1.lxv@listserv.bounces.google.com>
Received: from mail-pw0-f68.google.com (mail-pw0-f68.google.com [209.85.160.68])
        by mx.google.com with ESMTP id 7si9898913pwi.24.2009.12.09.12.29.10;
        Wed, 09 Dec 2009 12:29:10 -0800 (PST)
Received-SPF: pass (google.com: domain of 3lQggSwkJCAk5vnr11wn0pvjru.lxv03k7-oorpxxpunp0x3y1.lxv@listserv.bounces.google.com designates 209.85.160.68 as permitted sender) client-ip=209.85.160.68;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of 3lQggSwkJCAk5vnr11wn0pvjru.lxv03k7-oorpxxpunp0x3y1.lxv@listserv.bounces.google.com designates 209.85.160.68 as permitted sender) smtp.mail=3lQggSwkJCAk5vnr11wn0pvjru.lxv03k7-oorpxxpunp0x3y1.lxv@listserv.bounces.google.com
Received: by pwj20 with SMTP id 20sf868798pwj.27
        for <headius@headius.com>; Wed, 09 Dec 2009 12:29:10 -0800 (PST)
Received: by 10.115.101.14 with SMTP id d14mr750695wam.10.1260390549560;
        Wed, 09 Dec 2009 12:29:09 -0800 (PST)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.114.188.15 with SMTP id l15ls382388waf.3.p; Wed, 09 Dec 2009 
	12:29:08 -0800 (PST)
Received: by 10.114.3.19 with SMTP id 19mr2176181wac.17.1260390548459;
        Wed, 09 Dec 2009 12:29:08 -0800 (PST)
Received: by 10.114.3.19 with SMTP id 19mr2176180wac.17.1260390548436;
        Wed, 09 Dec 2009 12:29:08 -0800 (PST)
Return-Path: <wmeissner@gmail.com>
Received: from mail-pz0-f201.google.com (mail-pz0-f201.google.com [209.85.222.201])
        by gmr-mx.google.com with ESMTP id 25si19346pzk.11.2009.12.09.12.29.07;
        Wed, 09 Dec 2009 12:29:07 -0800 (PST)
Received-SPF: pass (google.com: domain of wmeissner@gmail.com designates 209.85.222.201 as permitted sender) client-ip=209.85.222.201;
Received: by pzk39 with SMTP id 39so5669180pzk.15
        for <ruby-ffi@googlegroups.com>; Wed, 09 Dec 2009 12:29:07 -0800 (PST)
MIME-Version: 1.0
Received: by 10.141.106.6 with SMTP id i6mr529968rvm.112.1260390547265; Wed, 
	09 Dec 2009 12:29:07 -0800 (PST)
In-Reply-To: <e6e161a9-2353-4e8f-a0fd-509d97986335@k4g2000yqb.googlegroups.com>
References: <4c3f8117-e7a8-4919-96ea-57d4541634dd@n35g2000yqm.googlegroups.com>
	 <4ccee320912082304s1f889c1di41cd612f29a1d39c@mail.gmail.com>
	 <e6e161a9-2353-4e8f-a0fd-509d97986335@k4g2000yqb.googlegroups.com>
Date: Thu, 10 Dec 2009 06:29:07 +1000
Message-ID: <4ccee320912091229n1ab01eey60013cd26d558545@mail.gmail.com>
Subject: Re: [ruby-ffi] Re: Initialize FFI::Pointer in C?
From: Wayne Meissner <wmeissner@gmail.com>
To: ruby-ffi@googlegroups.com
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of wmeissner@gmail.com designates 209.85.222.201 as permitted sender) 
	smtp.mail=wmeissner@gmail.com; dkim=pass (test mode) header.i=@gmail.com
X-Original-Sender: wmeissner@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=>
X-Thread-Url: http://groups.google.com/group/ruby-ffi/t/e9af8945b7d9ce71
X-Message-Url: http://groups.google.com/group/ruby-ffi/msg/ea99a20af12d37a1
Sender: ruby-ffi@googlegroups.com
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

You can setup that callback all from ruby.

module Foo
  callback :my_callback, [ :pointer ], :int
  attach_function :DefineFunction, [ :string, :char, :my_callback, :string =
]
end


Then you set it up like so:

cb =3D Proc.new do |p|
   # Do whatever you want to do in the callback here
   puts "pointer=3D#{p.inspect}"
   # return zero to C code
   0
end

Foo.DefineFunction("ruby-callback, "d".ord, cb, "RubyCallback")

You need to stash the 'cb' reference somewhere so it does not get
garbage collected until the callback is no longer needed, but that is
all the setup you should need to do to use that api from FFI.


2009/12/10 Simon Chiang <simon.a.chiang@gmail.com>:
> The problem is that I need to register the C function with a codebase
> I don't control. =A0I need to call a function like this in C:
>
> =A0int RubyCallback(void *thing) {...}
>
> =A0DefineFunction("ruby-callback", 'd', (int (*)(void)) RubyCallback,
> "RubyCallback");
>
> The leading inputs are not important for the example but if you look
> at the latter arguments you can see I need both a pointer to the
> callback function and the name of the function. =A0I think the FFI
> callback provides a function pointer but not a name, right? =A0Is there
> a way I can name the callback?
>
> I'm ok with manually maintaining my calls to the C api. =A0Do you have
> suggestions about how I can use it in this context? Thanks.
>
> =3D=3D=3D=3D FYI
>
> This is the signature of the DefineFunction method.
>
> =A0int =A0 =A0 =A0DefineFunction(functionName,functionType,
> functionPointer,actualFunctionName);
> =A0char =A0 =A0*functionName, functionType, *actualFunctionName;
> =A0int =A0 =A0(*functionPointer)();
>
> And if it helps, the version of the passing OS X is 10.5.8.
>
>
>
>
>
> On Dec 9, 12:04=A0am, Wayne Meissner <wmeiss...@gmail.com> wrote:
>> Really, don't use the C api - it will break at some point, since it is
>> not intended in any way to be a public api.
>>
>> Use a FFI callback to call from C to ruby.
>>
>> http://wiki.github.com/ffi/ffi/exampleshas a callback example, as
>> doeshttp://wiki.github.com/ffi/ffi/windows-examples
>>
>> 2009/12/9 Simon Chiang <simon.a.chi...@gmail.com>:
>>
>> > I'm building a callback to ruby from an extension and I would like to
>> > pass back pointers much like an attached function that returns
>> > a :pointer. =A0Basically something like this:
>>
>> > =A0int RubyCallback(void *thing)
>> > =A0{
>> > =A0 =A0VALUE ffi_pointer =3D rbffi_Pointer_NewInstance(thing);
>> > =A0 =A0VALUE ruby_module =3D rb_const_get(rb_cObject, rb_intern
>> > ("SomeModule"));
>> > =A0 =A0VALUE ruby_result =3D rb_funcall(ruby_module, rb_intern("callba=
ck"),
>> > 1, ffi_pointer);
>>
>> > =A0 =A0long result =3D FIX2INT(ruby_result);
>> > =A0 =A0return(result);
>> > =A0}
>>
>> > And then in ruby:
>>
>> > =A0module SomeModule
>> > =A0 =A0module_function
>>
>> > =A0 =A0def callback(ptr)
>> > =A0 =A0 =A0 ptr.inspect =A0 =A0 =A0 =A0 # =3D> shows this to be an FFI=
::Pointer
>> > =A0 =A0end
>> > =A0end
>>
>> > A method like this works on OS X with ffi-0.5.0 (pre snow-lepoard,
>> > I'll get the version if necessary) but results in a segfault on snow
>> > leopard 10.6.2. =A0The segfault is triggered upon inspect. =A0I don't =
know
>> > how FFI works... I really only got this working by taking a guess at
>> > what rbffi_Pointer_NewInstance does. =A0Any ideas what's going wrong o=
n
>> > 10.6.2 and/or how I can do this better?
>>
>>
>
