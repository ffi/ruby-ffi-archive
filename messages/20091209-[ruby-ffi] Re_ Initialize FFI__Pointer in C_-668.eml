Delivered-To: headius@headius.com
Received: by 10.114.184.4 with SMTP id h4cs722813waf;
        Wed, 9 Dec 2009 07:51:57 -0800 (PST)
Received: by 10.150.99.5 with SMTP id w5mr2888460ybb.113.1260373916237;
        Wed, 09 Dec 2009 07:51:56 -0800 (PST)
Return-Path: <3mscfSw4JCMwA0465.s.uz0s5yy4s03.u649CtG-xx0y66y3wy96C7A.u64@listserv.bounces.google.com>
Received: from mail-yw0-f138.google.com (mail-yw0-f138.google.com [209.85.211.138])
        by mx.google.com with ESMTP id 41si10918172ywh.0.2009.12.09.07.51.55;
        Wed, 09 Dec 2009 07:51:56 -0800 (PST)
Received-SPF: pass (google.com: domain of 3mscfSw4JCMwA0465.s.uz0s5yy4s03.u649CtG-xx0y66y3wy96C7A.u64@listserv.bounces.google.com designates 209.85.211.138 as permitted sender) client-ip=209.85.211.138;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of 3mscfSw4JCMwA0465.s.uz0s5yy4s03.u649CtG-xx0y66y3wy96C7A.u64@listserv.bounces.google.com designates 209.85.211.138 as permitted sender) smtp.mail=3mscfSw4JCMwA0465.s.uz0s5yy4s03.u649CtG-xx0y66y3wy96C7A.u64@listserv.bounces.google.com
Received: by ywh2 with SMTP id 2sf10656793ywh.27
        for <headius@headius.com>; Wed, 09 Dec 2009 07:51:55 -0800 (PST)
Received: by 10.101.141.36 with SMTP id t36mr831112ann.38.1260373914859;
        Wed, 09 Dec 2009 07:51:54 -0800 (PST)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.100.17.29 with SMTP id 29ls260081anq.1.p; Wed, 09 Dec 2009 
	07:51:53 -0800 (PST)
Received: by 10.100.29.20 with SMTP id c20mr4601782anc.17.1260373913543;
        Wed, 09 Dec 2009 07:51:53 -0800 (PST)
Received: by 10.100.29.20 with SMTP id c20mr4601780anc.17.1260373913513;
        Wed, 09 Dec 2009 07:51:53 -0800 (PST)
Return-Path: <simon.a.chiang@gmail.com>
Received: from mail-yx0-f157.google.com (mail-yx0-f157.google.com [209.85.210.157])
        by gmr-mx.google.com with ESMTP id 25si662716ywh.8.2009.12.09.07.51.53;
        Wed, 09 Dec 2009 07:51:53 -0800 (PST)
Received-SPF: pass (google.com: domain of simon.a.chiang@gmail.com designates 209.85.210.157 as permitted sender) client-ip=209.85.210.157;
Received: by mail-yx0-f157.google.com with SMTP id 29so13316381yxe.14
        for <ruby-ffi@googlegroups.com>; Wed, 09 Dec 2009 07:51:53 -0800 (PST)
MIME-Version: 1.0
Received: by 10.150.17.37 with SMTP id 37mr1081811ybq.12.1260373913477; Wed, 
	09 Dec 2009 07:51:53 -0800 (PST)
Date: Wed, 9 Dec 2009 07:51:53 -0800 (PST)
In-Reply-To: <4ccee320912082304s1f889c1di41cd612f29a1d39c@mail.gmail.com>
X-IP: 65.125.146.33
References: <4c3f8117-e7a8-4919-96ea-57d4541634dd@n35g2000yqm.googlegroups.com> 
	<4ccee320912082304s1f889c1di41cd612f29a1d39c@mail.gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; 
	rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5,gzip(gfe),gzip(gfe)
Message-ID: <e6e161a9-2353-4e8f-a0fd-509d97986335@k4g2000yqb.googlegroups.com>
Subject: [ruby-ffi] Re: Initialize FFI::Pointer in C?
From: Simon Chiang <simon.a.chiang@gmail.com>
To: ruby-ffi <ruby-ffi@googlegroups.com>
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of simon.a.chiang@gmail.com designates 209.85.210.157 as permitted 
	sender) smtp.mail=simon.a.chiang@gmail.com
X-Original-Sender: simon.a.chiang@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=>
X-Thread-Url: http://groups.google.com/group/ruby-ffi/t/e9af8945b7d9ce71
X-Message-Url: http://groups.google.com/group/ruby-ffi/msg/da4f06e770a73b65
Sender: ruby-ffi@googlegroups.com
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

The problem is that I need to register the C function with a codebase
I don't control.  I need to call a function like this in C:

  int RubyCallback(void *thing) {...}

  DefineFunction("ruby-callback", 'd', (int (*)(void)) RubyCallback,
"RubyCallback");

The leading inputs are not important for the example but if you look
at the latter arguments you can see I need both a pointer to the
callback function and the name of the function.  I think the FFI
callback provides a function pointer but not a name, right?  Is there
a way I can name the callback?

I'm ok with manually maintaining my calls to the C api.  Do you have
suggestions about how I can use it in this context? Thanks.

=3D=3D=3D=3D FYI

This is the signature of the DefineFunction method.

  int      DefineFunction(functionName,functionType,
functionPointer,actualFunctionName);
  char    *functionName, functionType, *actualFunctionName;
  int    (*functionPointer)();

And if it helps, the version of the passing OS X is 10.5.8.





On Dec 9, 12:04=A0am, Wayne Meissner <wmeiss...@gmail.com> wrote:
> Really, don't use the C api - it will break at some point, since it is
> not intended in any way to be a public api.
>
> Use a FFI callback to call from C to ruby.
>
> http://wiki.github.com/ffi/ffi/exampleshas a callback example, as
> doeshttp://wiki.github.com/ffi/ffi/windows-examples
>
> 2009/12/9 Simon Chiang <simon.a.chi...@gmail.com>:
>
> > I'm building a callback to ruby from an extension and I would like to
> > pass back pointers much like an attached function that returns
> > a :pointer. =A0Basically something like this:
>
> > =A0int RubyCallback(void *thing)
> > =A0{
> > =A0 =A0VALUE ffi_pointer =3D rbffi_Pointer_NewInstance(thing);
> > =A0 =A0VALUE ruby_module =3D rb_const_get(rb_cObject, rb_intern
> > ("SomeModule"));
> > =A0 =A0VALUE ruby_result =3D rb_funcall(ruby_module, rb_intern("callbac=
k"),
> > 1, ffi_pointer);
>
> > =A0 =A0long result =3D FIX2INT(ruby_result);
> > =A0 =A0return(result);
> > =A0}
>
> > And then in ruby:
>
> > =A0module SomeModule
> > =A0 =A0module_function
>
> > =A0 =A0def callback(ptr)
> > =A0 =A0 =A0 ptr.inspect =A0 =A0 =A0 =A0 # =3D> shows this to be an FFI:=
:Pointer
> > =A0 =A0end
> > =A0end
>
> > A method like this works on OS X with ffi-0.5.0 (pre snow-lepoard,
> > I'll get the version if necessary) but results in a segfault on snow
> > leopard 10.6.2. =A0The segfault is triggered upon inspect. =A0I don't k=
now
> > how FFI works... I really only got this working by taking a guess at
> > what rbffi_Pointer_NewInstance does. =A0Any ideas what's going wrong on
> > 10.6.2 and/or how I can do this better?
>
>
