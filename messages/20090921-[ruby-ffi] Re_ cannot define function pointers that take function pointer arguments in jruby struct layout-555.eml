Delivered-To: headius@headius.com
Received: by 10.224.2.131 with SMTP id 3cs158949qaj;
        Mon, 21 Sep 2009 14:45:36 -0700 (PDT)
Received: by 10.224.59.130 with SMTP id l2mr133857qah.73.1253569535749;
        Mon, 21 Sep 2009 14:45:35 -0700 (PDT)
Return-Path: <grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com>
Received: from mail-vw0-f145.google.com (mail-vw0-f145.google.com [209.85.212.145])
        by mx.google.com with ESMTP id 33si869829qyk.133.2009.09.21.14.45.34;
        Mon, 21 Sep 2009 14:45:34 -0700 (PDT)
Received-SPF: pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.212.145 as permitted sender) client-ip=209.85.212.145;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.212.145 as permitted sender) smtp.mail=grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by vws9 with SMTP id 9so4883038vws.22
        for <headius@headius.com>; Mon, 21 Sep 2009 14:45:34 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:received:x-sender:x-apparently-to
         :received:received:received:received-spf:received:dkim-signature
         :domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        bh=wISsAkplauPDmsk0mOcEko9bEdo2EGv8I2/mTAM1Nvc=;
        b=Aj1VMo/C1bW0iG0Mi4uymk8hMQe/jLcBwAHg/x3nFrP87o+OqfPrenPrttSfAkb2pu
         uj6qB3Pw9DrQUDdhvs3abUn5/R3hEaalvlIweBRayhsi0YQT6T/fl+1XYI4WjLlj0u58
         d8SsLwKppVMM7SuVWWgGja/p3DfHiidP9S7Pc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-sender:x-apparently-to:received-spf:authentication-results
         :dkim-signature:domainkey-signature:mime-version:in-reply-to
         :references:date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        b=WdQ5egffG8/Rh5pzs/N+8b7xR90Y1RdOoDgcdWdVhXZPZi1PQzFSrVptZzunQGuc+B
         Ic9bsZzA+pKwyhtIAJPD4MurMiL8Tv4RgBfblTPZrZ9I1cbqXstFVPwLFAohKdyzANwC
         WxfEij6MWGbxopy8XNnPTrbN0rWa+aA+kRlZ4=
Received: by 10.220.68.102 with SMTP id u38mr24712vci.5.1253569532983;
        Mon, 21 Sep 2009 14:45:32 -0700 (PDT)
Received: by 10.230.28.96 with SMTP id l32gr36vbc.0;
	Mon, 21 Sep 2009 14:45:32 -0700 (PDT)
X-Sender: themastermind1@gmail.com
X-Apparently-To: ruby-ffi@googlegroups.com
Received: by 10.220.77.231 with SMTP id h39mr67503vck.1.1253569530776; Mon, 21 Sep 2009 14:45:30 -0700 (PDT)
Received: by 10.220.77.231 with SMTP id h39mr67495vck.1.1253569530138; Mon, 21 Sep 2009 14:45:30 -0700 (PDT)
Return-Path: <themastermind1@gmail.com>
Received: from mail-yw0-f202.google.com (mail-yw0-f202.google.com [209.85.211.202]) by gmr-mx.google.com with ESMTP id 18si44044yxe.12.2009.09.21.14.45.29; Mon, 21 Sep 2009 14:45:29 -0700 (PDT)
Received-SPF: pass (google.com: domain of themastermind1@gmail.com designates 209.85.211.202 as permitted sender) client-ip=209.85.211.202;
Received: by mail-yw0-f202.google.com with SMTP id 40so4174317ywh.32 for <ruby-ffi@googlegroups.com>; Mon, 21 Sep 2009 14:45:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=gamma; h=domainkey-signature:mime-version:received:in-reply-to:references :date:message-id:subject:from:to:content-type :content-transfer-encoding; bh=ebBK6ZQyW4Ri1hL2JfukE0gWh39B09Mxkr4kGRz5hlo=; b=oLfaxJFnsd92Q5an8Q5cdu+CG15gAiF6AE0liPNGUvgOKgFOUWuZnO7HjInJbOyHJ0 NDIPaaTLj5VE9U1ttSWU5QumcO7mG7d8KzMkDE92iBjmXG1bSukff5MxKAkg++NeIHdL /cRmKhuQUFjE1a4MszQz8j6w8qVdZ7i5UdRFc=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=gmail.com; s=gamma; h=mime-version:in-reply-to:references:date:message-id:subject:from:to :content-type:content-transfer-encoding; b=F4Ac5rkEGcGGSBFpaqgpYI0n56f/bGdLiRHgtp9PhieRJW6XMOjGd3C2I6c2K4qhJy 3GXPPM9qhCUs0j+/2XEDC41PV+lHY2wDjWSrbndP0JR8sQdOlfqj5ayXtkRCjXM2aXWj u/lpHrg/lyiF5q5tn+U2RVaRKmRF/wH63R/0k=
MIME-Version: 1.0
Received: by 10.150.99.9 with SMTP id w9mr401483ybb.216.1253569528971; Mon, 21  Sep 2009 14:45:28 -0700 (PDT)
In-Reply-To: <4ccee320909172013t72e3558fi5657c40de1507be4@mail.gmail.com>
References: <c5a49969-580f-4bfd-8d72-23b5e677a28c@l35g2000pra.googlegroups.com> <4ccee320909172013t72e3558fi5657c40de1507be4@mail.gmail.com>
Date: Mon, 21 Sep 2009 14:45:28 -0700
Message-ID: <e1c05edd0909211445o28570b2j5462d037257d3b5f@mail.gmail.com>
Subject: [ruby-ffi] Re: cannot define function pointers that take function 
 pointer arguments in jruby struct layout
From: Aman Gupta <themastermind1@gmail.com>
To: ruby-ffi@googlegroups.com
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Reply-To: ruby-ffi@googlegroups.com
Sender: ruby-ffi@googlegroups.com
Precedence: bulk
X-Google-Loop: groups
Mailing-List: list ruby-ffi@googlegroups.com;
	contact ruby-ffi+owner@googlegroups.com
List-Id: <ruby-ffi.googlegroups.com>
List-Post: <mailto:ruby-ffi@googlegroups.com>
List-Help: <mailto:ruby-ffi+help@googlegroups.com>
List-Unsubscribe: <http://googlegroups.com/group/ruby-ffi/subscribe>,
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
X-BeenThere-Env: ruby-ffi@googlegroups.com
X-BeenThere: ruby-ffi@googlegroups.com


On Thu, Sep 17, 2009 at 8:13 PM, Wayne Meissner <wmeissner@gmail.com> wrote=
:
>
> 2009/9/14 Aman Gupta <themastermind1@gmail.com>:
>>
>> I'm using ffi-swig-generator on:
>>
>> typedef void (*MyCallback) (void *data);
>> typedef struct {
>> =A0void (*member) (MyCallback cb);
>> } MyStruct;
>>
>> which generates:
>>
>> =A0callback(:MyCallback, [ :pointer ], :void)
>> =A0class MyStruct < FFI::Struct
>> =A0 =A0layout(
>> =A0 =A0 =A0:member, callback([ :MyCallback ], :void)
>> =A0 =A0)
>> =A0end
>
> The root problem here is the resolution of :MyCallback - it will fail
> on both JRuby and 1.9 (or at least it does for me).
>
> The best way to ensure this works is to define a constant in enclosing
> module, and use that on the layout line.
>
> e.g.
> module Foo
> =A0extend FFI::Library
> =A0MyCallback =3D callback(:MyCallback, [ :pointer ], :void
> =A0class MyStruct < FFI::Struct
> =A0 =A0layout(:member, callback(MyCallback, :void))
> =A0end
> end

I like this syntax, although it only works if the callback is capitalized.

>
> Alternatively you can look it up using Foo.find_type(:MyCallback)
>
> module Foo
> =A0extend FFI::Library
> =A0callback(:MyCallback, [ :pointer ], :void
> =A0class MyStruct < FFI::Struct
> =A0 =A0layout(:member, callback(Foo.find_type(:MyCallback), :void))
> =A0end
> end

This one is harder to implement, since ffi-swig-generator doesn't
necessarily know the name of the enclosing module.

>
> ffi-swig-generator should be altered to do one of the above.

How about:

diff --git a/lib/generator/function.rb b/lib/generator/function.rb
index e0b9ac2..7432747 100644
--- a/lib/generator/function.rb
+++ b/lib/generator/function.rb
@@ -40,7 +40,7 @@ module FFI
       end
       def to_s
         unless @inline
-          @indent_str + "callback(:#{@symname}, [
#{get_params.join(', ')} ], #{get_rtype})"
+          @indent_str + "CB_#{@symname} =3D callback(:#{@symname}, [
#{get_params.join(', ')} ], #{get_rtype})"
         else
           @indent_str + "callback([ #{get_params.join(', ')} ], #{get_rtyp=
e})"
         end
diff --git a/lib/generator/type.rb b/lib/generator/type.rb
index 8846f60..9c01202 100644
--- a/lib/generator/type.rb
+++ b/lib/generator/type.rb
@@ -99,7 +99,7 @@ module FFI
         ffi_type_from(Generator::TYPES['int']) if @declaration.is_enum?
       end
       def callback
-        ":#{@full_decl.scan(/^callback\s(\w+)/).flatten[0]}" if
@declaration.is_callback?
+        "CB_#{@full_decl.scan(/^callback\s(\w+)/).flatten[0]}" if
@declaration.is_callback?
       end
       def inline_callback
         Callback.new(:node =3D> @node, :inline =3D> true, :typedefs =3D>
@typedefs).to_s if @declaration.is_inline_callback?

This works for my use case, although I don't particularly like the CB_
prefix. Maybe C_, Callback_ or just C?

  Aman

>
> Struct#find_type tries to emulate this behaviour, and fails - ruby
> does not appear to have anyway of getting the lexical enclosing module
> of a subclass, when accessed from a method of the superclass. =A0If
> anyone knows a way, I'd be interested.
>
