Delivered-To: headius@headius.com
Received: by 10.229.186.206 with SMTP id ct14cs21854qcb;
        Tue, 11 May 2010 10:35:02 -0700 (PDT)
Received: by 10.143.154.28 with SMTP id g28mr4208153wfo.70.1273599301756;
        Tue, 11 May 2010 10:35:01 -0700 (PDT)
Return-Path: <ruby-ffi+bncCJ2jt8vbBhDCqqbfBBoEnHUx6g@googlegroups.com>
Received: from mail-pz0-f168.google.com (mail-pz0-f168.google.com [209.85.222.168])
        by mx.google.com with ESMTP id g3si4608747wfn.75.2010.05.11.10.35.00;
        Tue, 11 May 2010 10:35:00 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDCqqbfBBoEnHUx6g@googlegroups.com designates 209.85.222.168 as permitted sender) client-ip=209.85.222.168;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDCqqbfBBoEnHUx6g@googlegroups.com designates 209.85.222.168 as permitted sender) smtp.mail=ruby-ffi+bncCJ2jt8vbBhDCqqbfBBoEnHUx6g@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pzk40 with SMTP id 40sf67390pzk.22
        for <headius@headius.com>; Tue, 11 May 2010 10:35:00 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:mime-version:received
         :x-proofpoint-spam-details:x-proofpoint-virus-version:from:subject
         :date:in-reply-to:to:references:message-id:x-mailer
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-type;
        bh=bLEqiD5VVdWo+QPphuqyeipnGypKr/1WhB96FZHPIoU=;
        b=t1HaAQhVVj9jhsrjde4xb38P77XyP6uOKuC3lHXzMoVZ8gXl6Elr2jQii48J6GCubc
         wQ+PAEuKX+C8/OUkQ8M5HSB8CyHun/vBimyA2xIIHJsSR24uH5gZ4I3I6jfgNl8hbT9j
         TmEz82/fq1M2ARV/YNcfaTdM0OBg/OuygaaEM=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:x-proofpoint-spam-details
         :x-proofpoint-virus-version:from:subject:date:in-reply-to:to
         :references:message-id:x-mailer:x-original-authentication-results
         :x-original-sender:reply-to:precedence:mailing-list:list-id
         :list-post:list-help:list-archive:sender:list-subscribe
         :list-unsubscribe:content-type;
        b=6cYLxnRGnK5VAufaIZvQc/Z3wiITN30e3L2b78UxnAB3N5TxBsqTis9NusJyF5QvDt
         o/l5ILbXuVNL/bSYl3gLUhJpnugIHcIodTl+iuBp4i49fsCNSznCaVkGzAjc6MwuiauI
         cP1Rc+FrJFeChfSujmdphFix8jwSjT7ycVV4U=
Received: by 10.142.250.34 with SMTP id x34mr333358wfh.11.1273599298228;
        Tue, 11 May 2010 10:34:58 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.142.2.23 with SMTP id 23ls16876923wfb.3.p; Tue, 11 May 2010 
	10:34:57 -0700 (PDT)
Received: by 10.142.209.1 with SMTP id h1mr1086065wfg.42.1273599297208;
        Tue, 11 May 2010 10:34:57 -0700 (PDT)
Received: by 10.142.209.1 with SMTP id h1mr1086063wfg.42.1273599297174;
        Tue, 11 May 2010 10:34:57 -0700 (PDT)
Return-Path: <cremes.devlist@mac.com>
Received: from asmtpout029.mac.com (asmtpout029.mac.com [17.148.16.104])
        by gmr-mx.google.com with ESMTP id 19si1107888pzk.3.2010.05.11.10.34.57;
        Tue, 11 May 2010 10:34:57 -0700 (PDT)
Received-SPF: pass (google.com: domain of cremes.devlist@mac.com designates 17.148.16.104 as permitted sender) client-ip=17.148.16.104;
MIME-version: 1.0
Received: from [192.168.0.101] ([76.8.86.186])
 by asmtp029.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec
 16 2008; 32bit)) with ESMTPSA id <0L2900EQUNHVSX30@asmtp029.mac.com> for
 ruby-ffi@googlegroups.com; Tue, 11 May 2010 10:34:47 -0700 (PDT)
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0
 ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0
 reason=mlx engine=6.0.2-1004200000 definitions=main-1005110099
X-Proofpoint-Virus-Version: vendor=fsecure
 engine=1.12.8161:2.4.5,1.2.40,4.0.166
 definitions=2010-05-11_04:2010-02-06,2010-05-11,2010-05-11 signatures=0
From: Chuck Remes <cremes.devlist@mac.com>
Subject: Re: [ruby-ffi] wiki update on pointers
Date: Tue, 11 May 2010 12:34:42 -0500
In-reply-to: <AANLkTinI-dPu4r_wHfrv3K0Cg-fvJfnB9K7-UIt56jXD@mail.gmail.com>
To: ruby-ffi@googlegroups.com
References: <383FE988-D919-4629-AD7C-E115AB5315CB@mac.com>
 <AANLkTinI-dPu4r_wHfrv3K0Cg-fvJfnB9K7-UIt56jXD@mail.gmail.com>
Message-id: <E9A643C2-5739-4DBF-A358-94A9C8E332D5@mac.com>
X-Mailer: Apple Mail (2.1078)
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of cremes.devlist@mac.com designates 17.148.16.104 as permitted 
	sender) smtp.mail=cremes.devlist@mac.com
X-Original-Sender: cremes.devlist@mac.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-type: multipart/alternative;
 boundary="Boundary_(ID_RiaLohmJH83J5ujH9RP3AA)"

--Boundary_(ID_RiaLohmJH83J5ujH9RP3AA)
Content-type: text/plain; charset=us-ascii
Content-transfer-encoding: 7BIT

On May 11, 2010, at 12:01 PM, Jeremy Voorhis wrote:

> It looks correct to me, except in my experience, MemoryPointer makes it unnecessary to wrap malloc(). For example, instead of,
>   LibC.malloc(baz.first.size * baz.size)
> I would write,
>   MemoryPointer.new(baz.first.size * baz.size).
> 
> The block form of MemoryPointer is also useful for automatically freeing the pointer when finished.
> 
> MemoryPointer.new(baz.first.size * baz.size) do |p|
>   p.write_array_of_int(baz)
>   C.DoSomethingWithArrayOfInt(p)
> end

Jeremy,

I'll add a note about MemoryPointer's block form. Looks cool.

BTW, you can't use MemoryPointer for the example I gave on the wiki. As soon as the MemoryPointer goes out of scope, it is garbage collected and the memory is freed. That isn't so useful when the 3rd party lib is supposed to own and manage the memory lifecycle going forward.

But for other cases where the ruby code controls the memory lifecycle, MemoryPointer is a good choice.

cr


--Boundary_(ID_RiaLohmJH83J5ujH9RP3AA)
Content-type: text/html; charset=us-ascii
Content-transfer-encoding: 7BIT

<html><head></head><body style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space; "><div><div>On May 11, 2010, at 12:01 PM, Jeremy Voorhis wrote:</div><br class="Apple-interchange-newline"><blockquote type="cite"><font class="Apple-style-span" face="arial, helvetica, sans-serif"><font class="Apple-style-span" color="#330033">It looks correct to me, except in my experience, MemoryPointer makes it unnecessary to wrap malloc(). For example, instead of,</font></font><div>
<font class="Apple-style-span" face="arial, helvetica, sans-serif"><font class="Apple-style-span" color="#330033">&nbsp;&nbsp;</font></font><span class="Apple-style-span" style="font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" face="arial, helvetica, sans-serif"><font class="Apple-style-span" color="#330033">LibC.malloc(baz.first.size * baz.size)</font></font></span></div>
<div><span class="Apple-style-span" style="font-family: arial, helvetica, sans-serif; font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" color="#330033">I would write,</font></span></div>
<div><span class="Apple-style-span" style="font-family: arial, helvetica, sans-serif; font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" color="#330033">  MemoryPointer.new(baz.first.size * baz.size).</font></span></div>
<div><span class="Apple-style-span" style="font-family: arial, helvetica, sans-serif; font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" color="#330033"><br></font></span></div><div><span class="Apple-style-span" style="font-family: arial, helvetica, sans-serif; font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" color="#330033">The block form of MemoryPointer is also useful for automatically freeing the pointer when finished.</font></span></div>
<div><span class="Apple-style-span" style="font-family: arial, helvetica, sans-serif; font-size: 12px; line-height: 16px; white-space: pre; "><font class="Apple-style-span" color="#330033"><br></font></span></div><div><font class="Apple-style-span" color="#330033" face="arial, helvetica, sans-serif" size="3"><span class="Apple-style-span" style="font-size: 12px; line-height: 16px; white-space: pre;">MemoryPointer.new(baz.first.size * baz.size) do |p|</span></font></div>
<div><font class="Apple-style-span" color="#330033" face="arial, helvetica, sans-serif" size="3"><span class="Apple-style-span" style="font-size: 12px; line-height: 16px; white-space: pre;">  p.write_array_of_int(baz)</span></font></div>
<div><font class="Apple-style-span" color="#330033" face="arial, helvetica, sans-serif" size="3"><span class="Apple-style-span" style="font-size: 12px; line-height: 16px; white-space: pre;">  C.DoSomethingWithArrayOfInt(p)</span></font></div>
<div><font class="Apple-style-span" color="#330033" face="arial, helvetica, sans-serif" size="3"><span class="Apple-style-span" style="font-size: 12px; line-height: 16px; white-space: pre;">end</span></font></div></blockquote></div><br><div>Jeremy,</div><div><br></div><div>I'll add a note about MemoryPointer's block form. Looks cool.</div><div><br></div><div>BTW, you can't use MemoryPointer for the example I gave on the wiki. As soon as the MemoryPointer goes out of scope, it is garbage collected and the memory is freed. That isn't so useful when the 3rd party lib is supposed to own and manage the memory lifecycle going forward.</div><div><br></div><div>But for other cases where the ruby code controls the memory lifecycle, MemoryPointer is a good choice.</div><div><br></div><div>cr</div><div><br></div></body></html>

--Boundary_(ID_RiaLohmJH83J5ujH9RP3AA)--
