Delivered-To: headius@headius.com
Received: by 10.150.226.5 with SMTP id y5cs10751ybg;
        Wed, 5 May 2010 18:18:06 -0700 (PDT)
Received: by 10.141.13.11 with SMTP id q11mr6256274rvi.75.1273108685791;
        Wed, 05 May 2010 18:18:05 -0700 (PDT)
Return-Path: <ruby-ffi+bncCOeQwYraAhDKsYjfBBoEGiUYFg@googlegroups.com>
Received: from mail-px0-f190.google.com (mail-px0-f190.google.com [209.85.212.190])
        by mx.google.com with ESMTP id k14si789394rvh.39.2010.05.05.18.18.04;
        Wed, 05 May 2010 18:18:04 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCOeQwYraAhDKsYjfBBoEGiUYFg@googlegroups.com designates 209.85.212.190 as permitted sender) client-ip=209.85.212.190;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCOeQwYraAhDKsYjfBBoEGiUYFg@googlegroups.com designates 209.85.212.190 as permitted sender) smtp.mail=ruby-ffi+bncCOeQwYraAhDKsYjfBBoEGiUYFg@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pxi18 with SMTP id 18sf2288059pxi.7
        for <headius@headius.com>; Wed, 05 May 2010 18:18:04 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:received:mime-version:received:received:date
         :in-reply-to:x-ip:references:user-agent:x-http-useragent:message-id
         :subject:from:to:x-original-authentication-results:x-original-sender
         :reply-to:precedence:mailing-list:list-id:list-post:list-help
         :list-archive:sender:list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        bh=9OrSV458LTni79d1AiZTeDU+t5YzEGpGc7mU2n/6JZ0=;
        b=fUhx6wRR5q84RuXthf1PO6Y1K6CkH0ODEnhX3UV6LSX0Nmtn041PvzeQ1UZJkjmIaX
         FGs/dHHNq9v7FpHxFQI6LwT1Glxny0x/8+tzLvslL2GUk3A3qUg4D7WHNg0zlV/EGava
         QuU1almBOueo397/3/HLwrbGsMEJRRYPyU7N4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:date:in-reply-to:x-ip
         :references:user-agent:x-http-useragent:message-id:subject:from:to
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        b=AV6A3ripZAw9le3Whx0iEB5ZWIGJu+FQpicKWbsBL3iOwI7zzKNRBqYjiCOvHda85Y
         wwZF/yDKSV2wkxN1KR78hCq/a75FYSgb5FQDm4uVh24GU88Se5KDLE4eBKEpzuDZHcL0
         9ZvzPoW7CFlvIaX6f+f6TlgVOW8vBh4CPJmxs=
Received: by 10.115.101.12 with SMTP id d12mr3011148wam.1.1273108682165;
        Wed, 05 May 2010 18:18:02 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.115.133.33 with SMTP id k33ls6995280wan.2.p; Wed, 05 May 2010 
	18:18:01 -0700 (PDT)
Received: by 10.115.67.6 with SMTP id u6mr3057266wak.21.1273108681055;
        Wed, 05 May 2010 18:18:01 -0700 (PDT)
Received: by 10.115.67.6 with SMTP id u6mr3057265wak.21.1273108680996;
        Wed, 05 May 2010 18:18:00 -0700 (PDT)
Return-Path: <phreakuencies@gmail.com>
Received: from mail-gw0-f61.google.com (mail-gw0-f61.google.com [74.125.83.61])
        by gmr-mx.google.com with ESMTP id k13si320920waf.1.2010.05.05.18.18.00;
        Wed, 05 May 2010 18:18:00 -0700 (PDT)
Received-SPF: pass (google.com: domain of phreakuencies@gmail.com designates 74.125.83.61 as permitted sender) client-ip=74.125.83.61;
Received: by gwj21 with SMTP id 21so13924515gwj.6
        for <ruby-ffi@googlegroups.com>; Wed, 05 May 2010 18:18:00 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.150.119.36 with SMTP id r36mr19530ybc.22.1273108680287; Wed, 
	05 May 2010 18:18:00 -0700 (PDT)
Received: by e2g2000yqn.googlegroups.com with HTTP; Wed, 5 May 2010 18:18:00 
	-0700 (PDT)
Date: Wed, 5 May 2010 18:18:00 -0700 (PDT)
In-Reply-To: <499b1ee0-00c4-4113-9b2e-70f50019d619@e2g2000yqn.googlegroups.com>
X-IP: 200.55.101.109
References: <499b1ee0-00c4-4113-9b2e-70f50019d619@e2g2000yqn.googlegroups.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (X11; U; Linux x86_64; en-US) AppleWebKit/533.2 
	(KHTML, like Gecko) Chrome/5.0.342.9 Safari/533.2,gzip(gfe)
Message-ID: <7f0e3049-6907-489a-a9d7-10feea8e2e22@e2g2000yqn.googlegroups.com>
Subject: [ruby-ffi] Re: Proper memory management
From: v01d <phreakuencies@gmail.com>
To: ruby-ffi <ruby-ffi@googlegroups.com>
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of phreakuencies@gmail.com designates 74.125.83.61 as permitted 
	sender) smtp.mail=phreakuencies@gmail.com
X-Original-Sender: phreakuencies@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Continuing brainstorming...

I was thinking on a solution that involves a little coding in C but
which I think could be a good candidate to do with some FFI magic
(maybe extending Ruby::FFI somehow).

My idea is to store not only @ptr, but a custom class that wraps the
pointer (using Data_Wrap_Struct) and registers a "free function" that
will call gsl_vector_free. This instance is saved as @ptr_holder so
that when the Vector instance is GC'd, @ptr_holder is also GC'd and
gsl_vector_free is called without having to wait for the finalizer to
be executed.

Now the problem is that requires a strange mix of C API usage and FFI.
First I would have to define a function like this on the C side:
VALUE hold_vector_ptr(VALUE ptr) {
  gsl_vector* ptr2 =3D (gsl_vector*)NUM2ULL(ptr);
  return Data_Wrap_Struct(cSomeClass, NULL, gsl_vector_free, ptr2);
}

so that I can do:
  def initialize(n)
    @ptr =3D GSLng.backend.gsl_alloc_vector(n)
    @ptr =3D GSLng.hold_vector_ptr(@ptr.address)
    Vector.define_finalizer(self, @ptr)
  end

What would be ideal in this case is to have a way to avoid the need of
defining at the C side one of these hold_*_ptr functions for each
pointer type (there are a lot under GSL). What I mean is something
like doing:
hold_ptr(@ptr.address, :gsl_vector_free)
on the Ruby side. At the C side this would require grabbing the
appropriate C function (in this case gsl_vector_free()) using the C
FFI API or something).

Ideas welcome (not necessarily for this proposed "solution", but for
any other that serves my purpose).

On May 5, 7:56=A0pm, v01d <phreakuenc...@gmail.com> wrote:
> Hi,
> I'm in the process of developing a Ruby binding to the GSL numerical
> library using FFI. Recently I stumbled upon a problematic issue
> regarding memory management and finalizers.
>
> Since the GSL library allows creation and destruction of instances
> like this:
> gsl_vector* ptr =3D gsl_alloc_vector(size_t n);
> ...
> gsl_free_vector(ptr);
>
> Then, in Ruby I do something like this:
>
> class Vector
> =A0 def initialize(n)
> =A0 =A0 @ptr =3D GSLng.backend.gsl_alloc_vector(n)
> =A0 =A0 Vector.define_finalizer(self, @ptr)
> =A0 end
>
> =A0 def Vector.define_finalizer(self, ptr)
> =A0 =A0 ObjectSpace.define_finalizer(self, lambda {|id|
> GSLng.backend.gsl_free_vector(ptr)})
> =A0 end
> end
>
> The problem is that if later I instatiante a Vector inside a loop,
> like:
> 10000.times do
> =A0 Vector.new(3)
> end
>
> This obviously eats a lot of memory until GC runs. Now, if I do:
> 10000.times do
> =A0 Vector.new(3)
> =A0 GC.start
> end
>
> the memory that the Vector instances themselves occupy is freed but
> the finalizer is not called (it is later called at program end),
> therefore all of the memory allocated through gsl_alloc_vector() is
> sitting there until program ends.
>
> I know that Ruby doesn't guarantee that finalizers are called in any
> particular moment (even after GC.start, which I thought would
> suffice). So what I'm asking probably is not really related to FFI
> itself, but I wanted to ask here since I imagined this would be a
> common pattern among FFI users. The question is then: is there a
> better way to manage this type of memory? I obviously cant use the
> transaction-like pattern (like File.open) since for a Vector that
> wouldn't make sense. It would be ideal to make the gsl_vector_free
> call when the actual Vector class is free'd. Maybe I need to go to a
> lower level for this and use the C api to register this call in the
> "free" function for this class, but that would be overkill since I
> wanted to avoid using C altogether.
>
> Thank you!
