Delivered-To: headius@headius.com
Received: by 10.229.186.206 with SMTP id ct14cs35313qcb;
        Sat, 8 May 2010 11:26:47 -0700 (PDT)
Received: by 10.227.137.208 with SMTP id x16mr1624730wbt.124.1273343206482;
        Sat, 08 May 2010 11:26:46 -0700 (PDT)
Return-Path: <ruby-ffi+bncCJ2jt8vbBhDh2ZbfBBoEySW_pQ@googlegroups.com>
Received: from mail-pz0-f168.google.com (mail-pz0-f168.google.com [209.85.222.168])
        by mx.google.com with ESMTP id y37si9874068wby.30.2010.05.08.11.26.44;
        Sat, 08 May 2010 11:26:45 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDh2ZbfBBoEySW_pQ@googlegroups.com designates 209.85.222.168 as permitted sender) client-ip=209.85.222.168;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDh2ZbfBBoEySW_pQ@googlegroups.com designates 209.85.222.168 as permitted sender) smtp.mail=ruby-ffi+bncCJ2jt8vbBhDh2ZbfBBoEySW_pQ@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pzk40 with SMTP id 40sf720088pzk.22
        for <headius@headius.com>; Sat, 08 May 2010 11:26:43 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:mime-version:received
         :x-proofpoint-spam-details:from:subject:date:message-id:to:x-mailer
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-transfer-encoding
         :content-type;
        bh=14JtzA2DhYuu5QbgD+JkUMtwBWv8Z3t8bmeAD4p/zfg=;
        b=QWMVXq1Aj8yTx25KdtUH5bKR3reeHZblKrFR8FGcczt6iUK46GF4XPtoXvNy16PmMu
         FWPfbzGq4eXk7AxutVErakx8Ta65QIFr8UjlVU85jggMSt/gz5gmFB/+m2uIbJLJcWbI
         GTzGFGLV9sRx1uk5uNt1vtFDnhNafCjQZYBnc=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:x-proofpoint-spam-details
         :from:subject:date:message-id:to:x-mailer
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-transfer-encoding
         :content-type;
        b=ULT2eTB7IGtvS/ksScAfdnRWF+47Vm8tKvp6qeckhAQH3MzFg7x+rPGG2N/Q+Js9E/
         Sp4j7lhUrEfrjAiej/OjnhZBhWW1QvD+ic2VtM+Nh2aosWyuCX9DbuB/LMGrCPY0uCx+
         2ugOCrUC08R5XgZHTGOC23sjO8gBE0CqCPks4=
Received: by 10.114.70.14 with SMTP id s14mr219560waa.22.1273343201695;
        Sat, 08 May 2010 11:26:41 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.115.135.31 with SMTP id m31ls14935236wan.1.p; Sat, 08 May 2010 
	11:26:40 -0700 (PDT)
Received: by 10.114.48.14 with SMTP id v14mr225197wav.43.1273343200386;
        Sat, 08 May 2010 11:26:40 -0700 (PDT)
Received: by 10.114.48.14 with SMTP id v14mr225196wav.43.1273343200256;
        Sat, 08 May 2010 11:26:40 -0700 (PDT)
Return-Path: <cremes.devlist@mac.com>
Received: from asmtpout028.mac.com (asmtpout028.mac.com [17.148.16.103])
        by gmr-mx.google.com with ESMTP id 19si627295pzk.7.2010.05.08.11.26.40;
        Sat, 08 May 2010 11:26:40 -0700 (PDT)
Received-SPF: pass (google.com: domain of cremes.devlist@mac.com designates 17.148.16.103 as permitted sender) client-ip=17.148.16.103;
MIME-version: 1.0
Received: from adsl-75-21-66-250.dsl.chcgil.sbcglobal.net
 (adsl-75-21-66-250.dsl.chcgil.sbcglobal.net [75.21.66.250])
 by asmtp028.mac.com
 (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec 16 2008; 32bit))
 with ESMTPSA id <0L24001S85WEEM30@asmtp028.mac.com> for
 ruby-ffi@googlegroups.com; Sat, 08 May 2010 11:26:40 -0700 (PDT)
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0
 ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0
 reason=mlx engine=5.0.0-0908210000 definitions=main-1005080105
From: Chuck Remes <cremes.devlist@mac.com>
Subject: [ruby-ffi] how to support arrays of structs
Date: Sat, 08 May 2010 13:26:38 -0500
Message-id: <9A911BD8-5D15-46C3-AE8F-D202C3CC774E@mac.com>
To: ruby-ffi@googlegroups.com
X-Mailer: Apple Mail (2.1078)
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of cremes.devlist@mac.com designates 17.148.16.103 as permitted 
	sender) smtp.mail=cremes.devlist@mac.com
X-Original-Sender: cremes.devlist@mac.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-transfer-encoding: 7BIT
Content-type: text/plain; charset=us-ascii

I have a C function call that takes a pointer to an array of structs. I've searched the ML, examples and existing projects using FFI but I haven't found anything yet that covers that case.

I want to ask if this is a reasonable methodology to mimic that behavior.

Here's some code.

module Lib
# not showing everything...

type struct foo_t {
  long a;
  long b;
  long c;
  char *d;
};

int bar(foo_t *array, int len);

Ideally I would like to work with that kind of C like it was ruby.

attach_function :bar, [:pointer, :int], :int

Foo < FFI::Struct
  layout :a, :long,
:b, :long,
:c, :long,
:d, :pointer
end
end # module

my_array = []
my_array << Foo.new
my_array << Foo.new
my_array << Foo.new

Lib.bar my_array, my_array.size

That doesn't work presumably because +my_array+ doesn't necessarily point to the beginning of the C or Java array backing the Ruby array. The C function then starts reading bogus data and potentially trampling over stuff it shouldn't.


However, I think this might work.

mem_chunk_ptr = FFI::MemoryPointer.new(:char, Foo.size * number_of_items)

foo1 = Foo.new mem_chunk_ptr

foo2 = Foo.new(mem_chunk_ptr + Foo.size)

etc.

Now I can pass +mem_chunk_ptr+ to my C function and everything should be ordered in memory. The big downfall of this technique is it uses a static chunk of memory. If you ever need to dynamically add more Foo structs to the array and you run out of space in your memory chunk, you need to allocate a bigger one, relocate/copy all existing structs and free up the original memory chunk. Obviously this could all be wrapped up and made a little nicer.

Should the first technique work with ruby arrays and I just have a different problem? If I'm right that it doesn't work (and I've tried), would a patch implementing the behavior I described be accepted into FFI core?

cr

