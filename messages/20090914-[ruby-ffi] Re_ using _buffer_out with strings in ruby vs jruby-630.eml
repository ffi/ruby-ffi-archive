Delivered-To: headius@headius.com
Received: by 10.224.67.198 with SMTP id s6cs276978qai;
        Mon, 14 Sep 2009 12:23:07 -0700 (PDT)
Received: by 10.224.47.40 with SMTP id l40mr5577197qaf.238.1252956187205;
        Mon, 14 Sep 2009 12:23:07 -0700 (PDT)
Return-Path: <grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com>
Received: from mail-yx0-f138.google.com (mail-yx0-f138.google.com [209.85.210.138])
        by mx.google.com with ESMTP id 9si10070014yxe.25.2009.09.14.12.23.06;
        Mon, 14 Sep 2009 12:23:06 -0700 (PDT)
Received-SPF: pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.210.138 as permitted sender) client-ip=209.85.210.138;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.210.138 as permitted sender) smtp.mail=grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by yxe2 with SMTP id 2so4916224yxe.3
        for <headius@headius.com>; Mon, 14 Sep 2009 12:23:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:received:x-sender:x-apparently-to
         :received:received:received:received-spf:received:dkim-signature
         :domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        bh=uJHNvsAZR1pjtiMhmnotXVMiUkjzamFyRP9XSCST8J8=;
        b=B6SBGphuf97873x1nhLsr5k9h/iE5qfdhw5NRvxVgrqh2qMTiuGT2/4745zwceIT8M
         dQseu5AF9ml25tcixcnk9au+CLpYWTkQyljrpNsmza77a0Sm5jfY5Odmua85cigDu1aU
         +Z/jbewfI/Pj95QjSswrUJtkfrEza4gDxAHbI=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-sender:x-apparently-to:received-spf:authentication-results
         :dkim-signature:domainkey-signature:mime-version:in-reply-to
         :references:date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        b=Lhdh/eH78wafkLAnH3Ol2fH01X6MBlh2/NnYG3jsNIYesTn4icGM84itsWd5fi2A0k
         qWs4gcn+Z/ZIe6ij0a87uo25SzLfIGdjwJpxuYyol66pu11Ni4p/auQSvnFh4zlszbXt
         l+7c3BA7fjOlp1YfG3ZLTWCR8loIOs/MHNi0k=
Received: by 10.150.68.1 with SMTP id q1mr203625yba.21.1252956183992;
        Mon, 14 Sep 2009 12:23:03 -0700 (PDT)
Received: by 10.177.38.34 with SMTP id q34gr22yqj.0;
	Mon, 14 Sep 2009 12:23:03 -0700 (PDT)
X-Sender: themastermind1@gmail.com
X-Apparently-To: ruby-ffi@googlegroups.com
Received: by 10.224.102.13 with SMTP id e13mr921964qao.4.1252956183465; Mon, 14 Sep 2009 12:23:03 -0700 (PDT)
Received: by 10.224.102.13 with SMTP id e13mr921963qao.4.1252956183409; Mon, 14 Sep 2009 12:23:03 -0700 (PDT)
Return-Path: <themastermind1@gmail.com>
Received: from mail-vw0-f194.google.com (mail-vw0-f194.google.com [209.85.212.194]) by gmr-mx.google.com with ESMTP id 24si918558qyk.6.2009.09.14.12.23.02; Mon, 14 Sep 2009 12:23:02 -0700 (PDT)
Received-SPF: pass (google.com: domain of themastermind1@gmail.com designates 209.85.212.194 as permitted sender) client-ip=209.85.212.194;
Received: by vws32 with SMTP id 32so2091729vws.11 for <ruby-ffi@googlegroups.com>; Mon, 14 Sep 2009 12:23:02 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=gamma; h=domainkey-signature:mime-version:received:in-reply-to:references :date:message-id:subject:from:to:content-type :content-transfer-encoding; bh=r2DzYk8T9/aKBV8/Iagb9i43JWslDo2PhpoXxSFCevM=; b=bhHcJxeP27p4gG5odBP9G4VhPrJhzSrKutAfNyyGhWb/OSDSPiIPbh/hbtiQksKAXu A9k5xlSMJdXYOg6nXz+gSndkVemffIkT3DXvOgTSZ24AyyiriEWe80/iAWB0jgmW7W8J jEqX/tEDzry0di+rA8ASUIdOabZUtRdHAIzdM=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=gmail.com; s=gamma; h=mime-version:in-reply-to:references:date:message-id:subject:from:to :content-type:content-transfer-encoding; b=cXxOhqTD/f2p3S36t8CKsq1A5EiWFApDFfpAT98w/3TuqXQwPHBxZyO0cTyyZupwhv /Wfw+pPiX47saEsuhB/y2ePbViQ7BDqbJoyaMvviU5jjDHsf9AqV517qwtPSQKUQ3hJi nbc/hncl2C8MuMvk2cTQ4P1VYd9qxeBjTsdJQ=
MIME-Version: 1.0
Received: by 10.150.26.5 with SMTP id 5mr10668746ybz.228.1252956182129; Mon,  14 Sep 2009 12:23:02 -0700 (PDT)
In-Reply-To: <4ccee320909140725s73a1eef1sf44ed87743afa2d0@mail.gmail.com>
References: <531031b1-b784-4180-b341-3ab5cf6eaf7a@f20g2000prn.googlegroups.com> <4ccee320909140725s73a1eef1sf44ed87743afa2d0@mail.gmail.com>
Date: Mon, 14 Sep 2009 12:23:02 -0700
Message-ID: <e1c05edd0909141223s7abdd2e7u96374449969b9fd7@mail.gmail.com>
Subject: [ruby-ffi] Re: using :buffer_out with strings in ruby vs jruby
From: Aman Gupta <themastermind1@gmail.com>
To: ruby-ffi@googlegroups.com
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Reply-To: ruby-ffi@googlegroups.com
Sender: ruby-ffi@googlegroups.com
Precedence: bulk
X-Google-Loop: groups
Mailing-List: list ruby-ffi@googlegroups.com;
	contact ruby-ffi+owner@googlegroups.com
List-Id: <ruby-ffi.googlegroups.com>
List-Post: <mailto:ruby-ffi@googlegroups.com>
List-Help: <mailto:ruby-ffi+help@googlegroups.com>
List-Unsubscribe: <http://googlegroups.com/group/ruby-ffi/subscribe>,
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
X-BeenThere-Env: ruby-ffi@googlegroups.com
X-BeenThere: ruby-ffi@googlegroups.com


Thanks, changing it to :buffer_in works as expected.

When I create an explicit Buffer and pass it in using :pointer, the
memory allocated for that buffer is freed when the ruby object is
garbage collected. What happens when I pass in a string as :buffer_in
instead? The contents of the string are copied into a temporary
buffer, but when is the buffer freed? or does it live on the stack?

  Aman

On Mon, Sep 14, 2009 at 7:25 AM, Wayne Meissner <wmeissner@gmail.com> wrote=
:
>
> If that code is doing what I think it is doing, you have the direction wr=
ong.
>
> :buffer_out =3D=3D copy out from native memory to ruby memory
> :buffer_in =3D=3D copy in to native memory from ruby memory
>
> Think of them like IN and OUT parameter specifications. =A0IN means the
> data is passed IN to the function, OUT means the function can alter
> the value of the parameter. =A0INOUT means both.
>
> As to why the tests fail if you pass the string first, its because the
> string gets overwritten with garbage from native memory due to the OUT
> param spec.
>
> The tests work with :pointer, because it is basically the same as
> :buffer_inout when it comes to string and Buffer arguments - the data
> is first copied IN to native memory from ruby, then after the call,
> the native data is copied OUT from native memory to ruby, =A0overwriting
> the data with the same thing as was already there.
>
> 2009/9/14 Aman Gupta <themastermind1@gmail.com>:
>>
>> I'm seeing different behavior on ruby vs jruby when passing in a
>> string as a :buffer_out argument:
>>
>> require 'rubygems'
>> require 'ffi'
>>
>> module GLib
>> =A0extend FFI::Library
>> =A0ffi_lib 'libglib-2.0'
>> =A0attach_function :g_memdup_buf, :g_memdup,
>> [ :buffer_out, :uint ], :pointer
>> =A0attach_function :g_memdup_ptr, :g_memdup,
>> [ :pointer, :uint ], :pointer
>>
>> =A0def self.test_memdup(arg_type, func_type)
>> =A0 =A0ostr =3D "a\0b\0c"
>>
>> =A0 =A0if arg_type =3D=3D :string
>> =A0 =A0 =A0arg =3D ostr.dup
>> =A0 =A0elsif arg_type =3D=3D :buffer
>> =A0 =A0 =A0arg =3D FFI::Buffer.new(ostr.size)
>> =A0 =A0 =A0arg.put_bytes(0, ostr)
>> =A0 =A0end
>>
>> =A0 =A0if func_type =3D=3D :buffer_out
>> =A0 =A0 =A0ret =3D GLib.g_memdup_buf(arg, arg.size)
>> =A0 =A0elsif func_type =3D=3D :pointer
>> =A0 =A0 =A0ret =3D GLib.g_memdup_ptr(arg, arg.size)
>> =A0 =A0end
>>
>> =A0 =A0rstr =3D ret.get_bytes(0, ostr.size)
>>
>> =A0 =A0p [arg_type, func_type, ostr, rstr, ostr =3D=3D rstr]
>> =A0end
>> end
>>
>> GLib.test_memdup(:buffer, :buffer_out)
>> GLib.test_memdup(:buffer, :pointer)
>> GLib.test_memdup(:string, :buffer_out)
>> GLib.test_memdup(:string, :pointer)
>>
>> $ ruby glib_memduptest.rb
>> [:buffer, :buffer_out, "a\000b\000c", "a\000b\000c", true]
>> [:buffer, :pointer, "a\000b\000c", "a\000b\000c", true]
>> [:string, :buffer_out, "a\000b\000c", "a\000b\000c", true]
>> [:string, :pointer, "a\000b\000c", "a\000b\000c", true]
>>
>> $ jruby glib_memduptest.rb
>> [:buffer, :buffer_out, "a\000b\000c", "\300\370\177\260A", false]
>> [:buffer, :pointer, "a\000b\000c", "a\000b\000c", true]
>> [:string, :buffer_out, "\001\000\000\000\270", "\001\000\000\000\270",
>> true]
>> [:string, :pointer, "\001\000\000\000\270", "\001\000\000\000\270",
>> true]
>>
>> I'm not really sure what's happening in the jruby case. If I use an
>> explicit FFI::Buffer with :pointer, it seems to work.
>>
>> What's really strange though, is that if you reverse the order in
>> which the tests happen (so the string versions execute first), they
>> all fail:
>>
>> GLib.test_memdup(:string, :buffer_out)
>> GLib.test_memdup(:string, :pointer)
>> GLib.test_memdup(:buffer, :buffer_out)
>> GLib.test_memdup(:buffer, :pointer)
>>
>> $ jruby glib_memduptest.rb
>> [:string, :buffer_out, "\300\370\177\260A", "\300\370\177\260A", true]
>> [:string, :pointer, "\300\370\177\260A", "\300\370\177\260A", true]
>> [:buffer, :buffer_out, "\300\370\177\260A", "0\f\200\001@", false]
>> [:buffer, :pointer, "\300\370\177\260A", "\300\370\177\260A", true]
>>
>
