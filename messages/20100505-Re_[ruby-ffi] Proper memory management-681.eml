Delivered-To: headius@headius.com
Received: by 10.150.226.5 with SMTP id y5cs11807ybg;
        Wed, 5 May 2010 19:02:21 -0700 (PDT)
Received: by 10.150.120.9 with SMTP id s9mr612764ybc.299.1273111341291;
        Wed, 05 May 2010 19:02:21 -0700 (PDT)
Return-Path: <ruby-ffi+bncCOeQwYraAhCqxojfBBoETGUNlQ@googlegroups.com>
Received: from mail-gw0-f62.google.com (mail-gw0-f62.google.com [74.125.83.62])
        by mx.google.com with ESMTP id 8si441181gxk.26.2010.05.05.19.02.20;
        Wed, 05 May 2010 19:02:20 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCOeQwYraAhCqxojfBBoETGUNlQ@googlegroups.com designates 74.125.83.62 as permitted sender) client-ip=74.125.83.62;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCOeQwYraAhCqxojfBBoETGUNlQ@googlegroups.com designates 74.125.83.62 as permitted sender) smtp.mail=ruby-ffi+bncCOeQwYraAhCqxojfBBoETGUNlQ@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by gwj23 with SMTP id 23sf4874474gwj.7
        for <headius@headius.com>; Wed, 05 May 2010 19:02:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:received:received:received:message-id:date
         :from:user-agent:mime-version:to:subject:references:in-reply-to
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        bh=vNOy3Mzki74y3nOllzMb5qm3lWEpVwMhum/o0PJt2VA=;
        b=s/GgLnKpQfNrETD7e4natIwKqPMxzR9TrsJRevXJBloPVZBFuhUgEOXOMugsGJHa2y
         ANMM0FKPxAj/2XEYrtscSVqfFwAljFJ4OdnAV4y+vO9/enqaEz2Q0jpeZZuXMYHYYPTI
         PnecpPNQCDKxmV+MFmp5bj12svQsPsFD2L4jA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:message-id:date:from:user-agent
         :mime-version:to:subject:references:in-reply-to
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        b=4i+npcidTtca/yv1ne5rn+j1glUMwQkbYhugRT6iU11FEf/ESk6Db9vEvhtFdveI3H
         BWi6JEJQwp9NqGy1ONxqstkx2w0SG7Uc/l7/7LTxgyFJrZUGEppP04PNE0TgC7pS5cQn
         +xsDeUctpS7809aZ1bGYgLcucv9D1j0soUd3k=
Received: by 10.100.28.26 with SMTP id b26mr674214anb.23.1273111338323;
        Wed, 05 May 2010 19:02:18 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.101.182.36 with SMTP id j36ls846999anp.3.p; Wed, 05 May 2010 
	19:02:18 -0700 (PDT)
Received: by 10.101.157.32 with SMTP id j32mr1567157ano.4.1273111337841;
        Wed, 05 May 2010 19:02:17 -0700 (PDT)
Received: by 10.101.157.32 with SMTP id j32mr1567154ano.4.1273111337479;
        Wed, 05 May 2010 19:02:17 -0700 (PDT)
Return-Path: <phreakuencies@gmail.com>
Received: from mail-gy0-f172.google.com (mail-gy0-f172.google.com [209.85.160.172])
        by gmr-mx.google.com with ESMTP id 19si33113yxe.7.2010.05.05.19.02.16;
        Wed, 05 May 2010 19:02:16 -0700 (PDT)
Received-SPF: pass (google.com: domain of phreakuencies@gmail.com designates 209.85.160.172 as permitted sender) client-ip=209.85.160.172;
Received: by gyh4 with SMTP id 4so2418727gyh.3
        for <ruby-ffi@googlegroups.com>; Wed, 05 May 2010 19:02:16 -0700 (PDT)
Received: by 10.101.205.18 with SMTP id h18mr3506468anq.30.1273111336124;
        Wed, 05 May 2010 19:02:16 -0700 (PDT)
Return-Path: <phreakuencies@gmail.com>
Received: from [192.168.0.3] (200-55-101-109.dsl.prima.net.ar [200.55.101.109])
        by mx.google.com with ESMTPS id r21sm4181799anp.17.2010.05.05.19.02.13
        (version=SSLv3 cipher=RC4-MD5);
        Wed, 05 May 2010 19:02:15 -0700 (PDT)
Message-ID: <4BE22334.2050605@gmail.com>
Date: Wed, 05 May 2010 23:02:28 -0300
From: v01d <phreakuencies@gmail.com>
User-Agent: Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.1.9) Gecko/20100330 Shredder/3.0.4
MIME-Version: 1.0
To: ruby-ffi@googlegroups.com
Subject: Re: [ruby-ffi] Proper memory management
References: <499b1ee0-00c4-4113-9b2e-70f50019d619@e2g2000yqn.googlegroups.com> <u2q94e476fd1005051802k61f2fd19r56e57ddfd75b5e98@mail.gmail.com>
In-Reply-To: <u2q94e476fd1005051802k61f2fd19r56e57ddfd75b5e98@mail.gmail.com>
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of phreakuencies@gmail.com designates 209.85.160.172 as permitted 
	sender) smtp.mail=phreakuencies@gmail.com; dkim=pass (test mode) 
	header.i=@gmail.com
X-Original-Sender: phreakuencies@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: text/plain; charset=UTF-8; format=flowed
Content-Transfer-Encoding: 7bit

Well, as I said in this case I can't use block-form.

Relying on the MRI GC is no problem, just that I would need this to be 
called when the object is freed, not just finalized, which can be a 
while later. This is perfectly do-able with the C API, its just that I 
don't know if any other FFI user has a better way to solve this without 
resorting to C.

On 05/05/2010 10:02 PM, Jeremy Voorhis wrote:
> I know from discussions over irc that Evan Phoenix isn't too keen on
> using finalizers for memory management for this very reason. In my own
> projects, I've found myself occasionally writing #dispose methods for
> manual object deletion, along with a block form of the constructor that
> ensures #dispose is called after the block is run. If controlling when
> memory should be freed is important, it's probably best not to rely on
> MRI's GC!
>
> Best
>
> Jeremy
>
> On Wed, May 5, 2010 at 3:56 PM, v01d <phreakuencies@gmail.com
> <mailto:phreakuencies@gmail.com>> wrote:
>
>     Hi,
>     I'm in the process of developing a Ruby binding to the GSL numerical
>     library using FFI. Recently I stumbled upon a problematic issue
>     regarding memory management and finalizers.
>
>     Since the GSL library allows creation and destruction of instances
>     like this:
>     gsl_vector* ptr = gsl_alloc_vector(size_t n);
>     ...
>     gsl_free_vector(ptr);
>
>     Then, in Ruby I do something like this:
>
>     class Vector
>       def initialize(n)
>         @ptr = GSLng.backend.gsl_alloc_vector(n)
>         Vector.define_finalizer(self, @ptr)
>       end
>
>       def Vector.define_finalizer(self, ptr)
>         ObjectSpace.define_finalizer(self, lambda {|id|
>     GSLng.backend.gsl_free_vector(ptr)})
>       end
>     end
>
>     The problem is that if later I instatiante a Vector inside a loop,
>     like:
>     10000.times do
>       Vector.new(3)
>     end
>
>     This obviously eats a lot of memory until GC runs. Now, if I do:
>     10000.times do
>       Vector.new(3)
>       GC.start
>     end
>
>     the memory that the Vector instances themselves occupy is freed but
>     the finalizer is not called (it is later called at program end),
>     therefore all of the memory allocated through gsl_alloc_vector() is
>     sitting there until program ends.
>
>     I know that Ruby doesn't guarantee that finalizers are called in any
>     particular moment (even after GC.start, which I thought would
>     suffice). So what I'm asking probably is not really related to FFI
>     itself, but I wanted to ask here since I imagined this would be a
>     common pattern among FFI users. The question is then: is there a
>     better way to manage this type of memory? I obviously cant use the
>     transaction-like pattern (like File.open) since for a Vector that
>     wouldn't make sense. It would be ideal to make the gsl_vector_free
>     call when the actual Vector class is free'd. Maybe I need to go to a
>     lower level for this and use the C api to register this call in the
>     "free" function for this class, but that would be overkill since I
>     wanted to avoid using C altogether.
>
>     Thank you!
>
>
