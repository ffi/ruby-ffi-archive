Delivered-To: headius@headius.com
Received: by 10.150.226.5 with SMTP id y5cs37430ybg;
        Fri, 7 May 2010 12:13:42 -0700 (PDT)
Received: by 10.115.117.15 with SMTP id u15mr335411wam.63.1273259621866;
        Fri, 07 May 2010 12:13:41 -0700 (PDT)
Return-Path: <ruby-ffi+bncCJ2jt8vbBhDizJHfBBoEKzhR5g@googlegroups.com>
Received: from mail-pw0-f62.google.com (mail-pw0-f62.google.com [209.85.160.62])
        by mx.google.com with ESMTP id j1si5305217wai.61.2010.05.07.12.13.40;
        Fri, 07 May 2010 12:13:40 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDizJHfBBoEKzhR5g@googlegroups.com designates 209.85.160.62 as permitted sender) client-ip=209.85.160.62;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDizJHfBBoEKzhR5g@googlegroups.com designates 209.85.160.62 as permitted sender) smtp.mail=ruby-ffi+bncCJ2jt8vbBhDizJHfBBoEKzhR5g@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pwi10 with SMTP id 10sf438767pwi.7
        for <headius@headius.com>; Fri, 07 May 2010 12:13:40 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:mime-version:received
         :x-proofpoint-spam-details:subject:from:in-reply-to:date:message-id
         :references:to:x-mailer:x-original-authentication-results
         :x-original-sender:reply-to:precedence:mailing-list:list-id
         :list-post:list-help:list-archive:sender:list-subscribe
         :list-unsubscribe:content-transfer-encoding:content-type;
        bh=eRPiym00Aq+lTfqCaFFI0agsO8ztNSmm8h00kK+TkAw=;
        b=mkaivE246/NBO7PhrjR6D1LM2MZkJv9vtD6kcrshTmU8I6sMPvYLM4kKwaWzannsYc
         uJQ0SN+Xb4BGNr6wVLFH8UJt3YGaqDZH2MpRWQ4f2jqUujenEMetgCClhx2CpeM3hF1V
         quXUKoG7mDEk0XwkZzltGuuwMc4ggaOQNVq+M=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:x-proofpoint-spam-details
         :subject:from:in-reply-to:date:message-id:references:to:x-mailer
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-transfer-encoding
         :content-type;
        b=u+zhROqyjDAtns1FKWAJ+zL60QYN15mPn7BZsHRrEw9fnb0vO4yUr9yU6zBeBpt3ls
         4d2QlpLC+R4NPDXceEWwj/lMPdYyPClEvwCHiXbthG3kUSyVjB0COBwLHeNNJLs3Mx7E
         5ODo41CNEZiS2ARsNW/7VZR4oUtXixoTggv4c=
Received: by 10.141.187.38 with SMTP id o38mr51185rvp.9.1273259618461;
        Fri, 07 May 2010 12:13:38 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.141.188.22 with SMTP id q22ls9145992rvp.1.p; Fri, 07 May 2010 
	12:13:37 -0700 (PDT)
Received: by 10.140.83.35 with SMTP id g35mr54720rvb.0.1273259616966;
        Fri, 07 May 2010 12:13:36 -0700 (PDT)
Received: by 10.140.83.35 with SMTP id g35mr54719rvb.0.1273259616943;
        Fri, 07 May 2010 12:13:36 -0700 (PDT)
Return-Path: <cremes.devlist@mac.com>
Received: from asmtpout030.mac.com (asmtpout030.mac.com [17.148.16.105])
        by gmr-mx.google.com with ESMTP id 18si442889pzk.14.2010.05.07.12.13.36;
        Fri, 07 May 2010 12:13:36 -0700 (PDT)
Received-SPF: pass (google.com: domain of cremes.devlist@mac.com designates 17.148.16.105 as permitted sender) client-ip=17.148.16.105;
MIME-version: 1.0
Received: from [192.168.0.101] ([76.8.86.186])
 by asmtp030.mac.com (Sun Java(tm) System Messaging Server 6.3-8.01 (built Dec
 16 2008; 32bit)) with ESMTPSA id <0L220042JDE0N950@asmtp030.mac.com> for
 ruby-ffi@googlegroups.com; Fri, 07 May 2010 12:13:13 -0700 (PDT)
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0
 ipscore=0 phishscore=0 bulkscore=0 adultscore=0 classifier=spam adjust=0
 reason=mlx engine=5.0.0-0908210000 definitions=main-1005070121
Subject: Re: [ruby-ffi] I can't figure out my memory leak
From: Chuck Remes <cremes.devlist@mac.com>
In-reply-to: <E64169D4-0C48-4071-B0B6-07015124C417@mac.com>
Date: Fri, 07 May 2010 14:13:07 -0500
Message-id: <74BBB83D-199B-42BA-8F00-C3B1B7EE2DAA@mac.com>
References: <DE55494E-6A74-4C70-AC33-9BA104DD2A7A@mac.com>
 <E64169D4-0C48-4071-B0B6-07015124C417@mac.com>
To: ruby-ffi@googlegroups.com
X-Mailer: Apple Mail (2.1078)
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of cremes.devlist@mac.com designates 17.148.16.105 as permitted 
	sender) smtp.mail=cremes.devlist@mac.com
X-Original-Sender: cremes.devlist@mac.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-transfer-encoding: 7BIT
Content-type: text/plain; charset=us-ascii

On May 7, 2010, at 1:28 PM, Chuck Remes wrote:

> 
> On May 7, 2010, at 11:26 AM, Chuck Remes wrote:
> 
>> http://github.com/chuckremes/ffi-rzmq
>> 
>> I have a tremendous memory leak in my FFI code. I'm pretty sure I know exactly where it is caused but I have no idea how to solve it. This gist shows the code in question.
>> 
>> http://gist.github.com/393627
>> 
>> The first gist block is where I think the memory leak lives. The second gist block is the definition of the leaking Struct and the definitions of the library functions.
>> 
>> Here's the sequence of events for the creation of a message where message is not nil (from the constructor).
>> 
>> 1. Allocate the Msg_t Struct.
>> 
>> 2. Create a MemoryPointer from the message string to create the Msg_t payload.
>> 
>> 3. Hand off the Struct obj to the underlying library and tell the library the size needed to store the data.
>> 
>> 4. Hand off the MemoryPointer pointing to the message data to the underlying library. The library should now *own* the memory allocated in step #2 and manage it from here on.
>> 
>> 
>> After a call is made to transmit OR receive the message obj, it calls Message#close. This makes a call to the underlying library to close the message and release its memory. This should release the memory that was allocated in #2 above. 
> 
> I made a little progress though the leak remains.
> 
> I talked with the library author and he set me straight on one of the calls. In step #3 even though we hand off a buffer we allocated to contain the payload, the library does not handle its deallocation. The handoff now includes a function callback to handle the deallocation. All the callback does is "ptr.free".
> 
> I have confirmed the callback is fired by having it print a statement. It is called for every message yet the leaking memory still grows at the same rate. :(
> 
> I looked at the source code for FFI and see that a call to MemoryPointer#free calls xfree immediately. So I'm still at a loss to explain the leakage. I'll try analyzing the JRuby heap to see if there are orphaned objects and where they are coming from.

Found it. It was my misuse of the wrapped library.

    def initialize message = nil
      @struct = LibZMQ::Msg_t.new

      if message
        data = FFI::MemoryPointer.from_string message.to_s
        result_code = LibZMQ.zmq_msg_init_size @struct, message.size
        error_check ZMQ_MSG_INIT_SIZE_STR, result_code

        # assign a memory deallocation callback function
        result_code = LibZMQ.zmq_msg_init_data @struct, data, message.size, LibZMQ::MessageDeallocator, nil
        error_check ZMQ_MSG_INIT_DATA_STR, result_code
      else
        result_code = LibZMQ.zmq_msg_init @struct
        error_check ZMQ_MSG_INIT_STR, result_code
      end
    end

That first call to zmq_msg_init_size was allocating and intializing my Msg_t struct and assigning +message.size+ bytes to it. Two lines later I call zmq_msg_init_data and pass in my payload which overwrites the buffer pointer in the Msg_t struct and orphans the memory allocated from the first step.

The fix was to eliminate the call to zmq_msg_init_size; it was unnecessary.

I know this probably isn't of interest to most readers of this ML, but I thought it resulted in some useful advice. If you have a memory leak, make sure you aren't misusing the library in such a way that it orphans its own data.

cr

