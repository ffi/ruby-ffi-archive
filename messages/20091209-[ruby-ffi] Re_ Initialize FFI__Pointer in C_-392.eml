Delivered-To: headius@headius.com
Received: by 10.150.195.21 with SMTP id s21cs833177ybf;
        Wed, 9 Dec 2009 16:27:27 -0800 (PST)
Received: by 10.224.71.203 with SMTP id i11mr5995581qaj.338.1260404847101;
        Wed, 09 Dec 2009 16:27:27 -0800 (PST)
Return-Path: <3a0AgSw4JCBcF59BA.x.z45xA339x58.zB9EHyL-2253BB3813EBHCF.zB9@listserv.bounces.google.com>
Received: from mail-qy0-f141.google.com (mail-qy0-f141.google.com [209.85.221.141])
        by mx.google.com with ESMTP id 26si972468qwa.50.2009.12.09.16.27.27;
        Wed, 09 Dec 2009 16:27:27 -0800 (PST)
Received-SPF: pass (google.com: domain of 3a0AgSw4JCBcF59BA.x.z45xA339x58.zB9EHyL-2253BB3813EBHCF.zB9@listserv.bounces.google.com designates 209.85.221.141 as permitted sender) client-ip=209.85.221.141;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of 3a0AgSw4JCBcF59BA.x.z45xA339x58.zB9EHyL-2253BB3813EBHCF.zB9@listserv.bounces.google.com designates 209.85.221.141 as permitted sender) smtp.mail=3a0AgSw4JCBcF59BA.x.z45xA339x58.zB9EHyL-2253BB3813EBHCF.zB9@listserv.bounces.google.com
Received: by qyk5 with SMTP id 5sf4438536qyk.3
        for <headius@headius.com>; Wed, 09 Dec 2009 16:27:26 -0800 (PST)
Received: by 10.224.49.81 with SMTP id u17mr153370qaf.35.1260404844121;
        Wed, 09 Dec 2009 16:27:24 -0800 (PST)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.224.20.212 with SMTP id g20ls596602qab.0.p; Wed, 09 Dec 2009 
	16:27:21 -0800 (PST)
Received: by 10.90.24.14 with SMTP id 14mr13021563agx.13.1260404841097;
        Wed, 09 Dec 2009 16:27:21 -0800 (PST)
Received: by 10.90.24.14 with SMTP id 14mr13021552agx.13.1260404840834;
        Wed, 09 Dec 2009 16:27:20 -0800 (PST)
Return-Path: <simon.a.chiang@gmail.com>
Received: from mail-yw0-f166.google.com (mail-yw0-f166.google.com [209.85.211.166])
        by gmr-mx.google.com with ESMTP id 18si35825yxe.4.2009.12.09.16.27.20;
        Wed, 09 Dec 2009 16:27:20 -0800 (PST)
Received-SPF: pass (google.com: domain of simon.a.chiang@gmail.com designates 209.85.211.166 as permitted sender) client-ip=209.85.211.166;
Received: by ywh38 with SMTP id 38so14520249ywh.9
        for <ruby-ffi@googlegroups.com>; Wed, 09 Dec 2009 16:27:20 -0800 (PST)
MIME-Version: 1.0
Received: by 10.150.24.20 with SMTP id 20mr1122160ybx.23.1260404840454; Wed, 
	09 Dec 2009 16:27:20 -0800 (PST)
Date: Wed, 9 Dec 2009 16:27:20 -0800 (PST)
In-Reply-To: <4ccee320912091229n1ab01eey60013cd26d558545@mail.gmail.com>
X-IP: 65.125.146.33
References: <4c3f8117-e7a8-4919-96ea-57d4541634dd@n35g2000yqm.googlegroups.com> 
	<4ccee320912082304s1f889c1di41cd612f29a1d39c@mail.gmail.com> 
	<e6e161a9-2353-4e8f-a0fd-509d97986335@k4g2000yqb.googlegroups.com> 
	<4ccee320912091229n1ab01eey60013cd26d558545@mail.gmail.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; 
	rv:1.9.1.5) Gecko/20091102 Firefox/3.5.5,gzip(gfe),gzip(gfe)
Message-ID: <2b806e5f-02dc-42dc-a046-86906253ffc1@g1g2000pra.googlegroups.com>
Subject: [ruby-ffi] Re: Initialize FFI::Pointer in C?
From: Simon Chiang <simon.a.chiang@gmail.com>
To: ruby-ffi <ruby-ffi@googlegroups.com>
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of simon.a.chiang@gmail.com designates 209.85.211.166 as permitted 
	sender) smtp.mail=simon.a.chiang@gmail.com
X-Original-Sender: simon.a.chiang@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=>
X-Thread-Url: http://groups.google.com/group/ruby-ffi/t/e9af8945b7d9ce71
X-Message-Url: http://groups.google.com/group/ruby-ffi/msg/54ab88036958e226
Sender: ruby-ffi@googlegroups.com
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

I thought I had tried that but I was wrong... works great!  Thank you
very much.

On Dec 9, 1:29=A0pm, Wayne Meissner <wmeiss...@gmail.com> wrote:
> You can setup that callback all from ruby.
>
> module Foo
> =A0 callback :my_callback, [ :pointer ], :int
> =A0 attach_function :DefineFunction, [ :string, :char, :my_callback, :str=
ing ]
> end
>
> Then you set it up like so:
>
> cb =3D Proc.new do |p|
> =A0 =A0# Do whatever you want to do in the callback here
> =A0 =A0puts "pointer=3D#{p.inspect}"
> =A0 =A0# return zero to C code
> =A0 =A00
> end
>
> Foo.DefineFunction("ruby-callback, "d".ord, cb, "RubyCallback")
>
> You need to stash the 'cb' reference somewhere so it does not get
> garbage collected until the callback is no longer needed, but that is
> all the setup you should need to do to use that api from FFI.
>
> 2009/12/10 Simon Chiang <simon.a.chi...@gmail.com>:
>
> > The problem is that I need to register the C function with a codebase
> > I don't control. =A0I need to call a function like this in C:
>
> > =A0int RubyCallback(void *thing) {...}
>
> > =A0DefineFunction("ruby-callback", 'd', (int (*)(void)) RubyCallback,
> > "RubyCallback");
>
> > The leading inputs are not important for the example but if you look
> > at the latter arguments you can see I need both a pointer to the
> > callback function and the name of the function. =A0I think the FFI
> > callback provides a function pointer but not a name, right? =A0Is there
> > a way I can name the callback?
>
> > I'm ok with manually maintaining my calls to the C api. =A0Do you have
> > suggestions about how I can use it in this context? Thanks.
>
> > =3D=3D=3D=3D FYI
>
> > This is the signature of the DefineFunction method.
>
> > =A0int =A0 =A0 =A0DefineFunction(functionName,functionType,
> > functionPointer,actualFunctionName);
> > =A0char =A0 =A0*functionName, functionType, *actualFunctionName;
> > =A0int =A0 =A0(*functionPointer)();
>
> > And if it helps, the version of the passing OS X is 10.5.8.
>
> > On Dec 9, 12:04=A0am, Wayne Meissner <wmeiss...@gmail.com> wrote:
> >> Really, don't use the C api - it will break at some point, since it is
> >> not intended in any way to be a public api.
>
> >> Use a FFI callback to call from C to ruby.
>
> >>http://wiki.github.com/ffi/ffi/exampleshasa callback example, as
> >> doeshttp://wiki.github.com/ffi/ffi/windows-examples
>
> >> 2009/12/9 Simon Chiang <simon.a.chi...@gmail.com>:
>
> >> > I'm building a callback to ruby from an extension and I would like t=
o
> >> > pass back pointers much like an attached function that returns
> >> > a :pointer. =A0Basically something like this:
>
> >> > =A0int RubyCallback(void *thing)
> >> > =A0{
> >> > =A0 =A0VALUE ffi_pointer =3D rbffi_Pointer_NewInstance(thing);
> >> > =A0 =A0VALUE ruby_module =3D rb_const_get(rb_cObject, rb_intern
> >> > ("SomeModule"));
> >> > =A0 =A0VALUE ruby_result =3D rb_funcall(ruby_module, rb_intern("call=
back"),
> >> > 1, ffi_pointer);
>
> >> > =A0 =A0long result =3D FIX2INT(ruby_result);
> >> > =A0 =A0return(result);
> >> > =A0}
>
> >> > And then in ruby:
>
> >> > =A0module SomeModule
> >> > =A0 =A0module_function
>
> >> > =A0 =A0def callback(ptr)
> >> > =A0 =A0 =A0 ptr.inspect =A0 =A0 =A0 =A0 # =3D> shows this to be an F=
FI::Pointer
> >> > =A0 =A0end
> >> > =A0end
>
> >> > A method like this works on OS X with ffi-0.5.0 (pre snow-lepoard,
> >> > I'll get the version if necessary) but results in a segfault on snow
> >> > leopard 10.6.2. =A0The segfault is triggered upon inspect. =A0I don'=
t know
> >> > how FFI works... I really only got this working by taking a guess at
> >> > what rbffi_Pointer_NewInstance does. =A0Any ideas what's going wrong=
 on
> >> > 10.6.2 and/or how I can do this better?
>
>
