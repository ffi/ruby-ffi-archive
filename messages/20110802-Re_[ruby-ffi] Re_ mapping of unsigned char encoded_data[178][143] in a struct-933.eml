Delivered-To: headius@headius.com
Received: by 10.14.187.140 with SMTP id y12cs127841eem;
        Mon, 1 Aug 2011 22:27:07 -0700 (PDT)
Received: by 10.236.161.161 with SMTP id w21mr951872yhk.115.1312262826882;
        Mon, 01 Aug 2011 22:27:06 -0700 (PDT)
Return-Path: <ruby-ffi+bncCOTExePwEBClld7xBBoE5nx1LQ@googlegroups.com>
Received: from mail-yx0-f190.google.com (mail-yx0-f190.google.com [209.85.213.190])
        by mx.google.com with ESMTPS id d42si12997916yhn.110.2011.08.01.22.27.06
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 01 Aug 2011 22:27:06 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCOTExePwEBClld7xBBoE5nx1LQ@googlegroups.com designates 209.85.213.190 as permitted sender) client-ip=209.85.213.190;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCOTExePwEBClld7xBBoE5nx1LQ@googlegroups.com designates 209.85.213.190 as permitted sender) smtp.mail=ruby-ffi+bncCOTExePwEBClld7xBBoE5nx1LQ@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by yxk8 with SMTP id 8sf12936096yxk.7
        for <headius@headius.com>; Mon, 01 Aug 2011 22:27:06 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:x-original-sender
         :x-original-authentication-results:reply-to:precedence:mailing-list
         :list-id:x-google-group-id:list-post:list-help:list-archive:sender
         :list-subscribe:list-unsubscribe:content-type;
        bh=qvoG/2lMV416weDuh5rPUD8xHreD5YUgeU3q36riO04=;
        b=Hjup/zyaA9yURALFSEaGyHfEA437IM18kfQ9S+Z9lASCYbHX1xuZjn1nGwY3/kIW6x
         hNDnagCoA1z6tVwmM5Gi0wA/PBRDOzuBpw5fEbX7Vq1Jo1LNzGbeFJjkMUtinX+rUtzG
         FypGVvT4gQ3Wg3IEplQ6rF8tfQ71571xttMTM=
Received: by 10.91.207.1 with SMTP id j1mr296230agq.17.1312262821639;
        Mon, 01 Aug 2011 22:27:01 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.231.77.5 with SMTP id e5ls4971876ibk.0.gmail; Mon, 01 Aug 2011
 22:27:01 -0700 (PDT)
Received: by 10.42.164.6 with SMTP id e6mr1886442icy.49.1312262821222;
        Mon, 01 Aug 2011 22:27:01 -0700 (PDT)
Received: by 10.42.164.6 with SMTP id e6mr1886441icy.49.1312262821115;
        Mon, 01 Aug 2011 22:27:01 -0700 (PDT)
Received: from mail-iy0-f178.google.com (mail-iy0-f178.google.com [209.85.210.178])
        by gmr-mx.google.com with ESMTPS id g20si5770565icm.5.2011.08.01.22.27.01
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 01 Aug 2011 22:27:01 -0700 (PDT)
Received-SPF: pass (google.com: domain of domribaut@gmail.com designates 209.85.210.178 as permitted sender) client-ip=209.85.210.178;
Received: by mail-iy0-f178.google.com with SMTP id 26so10296141iyb.23
        for <ruby-ffi@googlegroups.com>; Mon, 01 Aug 2011 22:27:01 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.43.52.198 with SMTP id vn6mr2048155icb.177.1312262821002; Mon,
 01 Aug 2011 22:27:01 -0700 (PDT)
Received: by 10.42.175.197 with HTTP; Mon, 1 Aug 2011 22:27:00 -0700 (PDT)
Received: by 10.42.175.197 with HTTP; Mon, 1 Aug 2011 22:27:00 -0700 (PDT)
In-Reply-To: <121228.106.1312255103140.JavaMail.geo-discussion-forums@prhz13>
References: <8db95be6-f27e-41ff-b6d8-b381f40b0362@p20g2000yqp.googlegroups.com>
	<121228.106.1312255103140.JavaMail.geo-discussion-forums@prhz13>
Date: Tue, 2 Aug 2011 07:27:00 +0200
Message-ID: <CA+nzXWZN_0rZM4gxvppdSm9w562SfFQFAd=bFxGmgFbP8B+n6g@mail.gmail.com>
Subject: Re: [ruby-ffi] Re: mapping of unsigned char encoded_data[178][143] in
 a struct
From: Dominique Ribaut <domribaut@gmail.com>
To: ruby-ffi@googlegroups.com
X-Original-Sender: domribaut@gmail.com
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com:
 domain of domribaut@gmail.com designates 209.85.210.178 as permitted sender)
 smtp.mail=domribaut@gmail.com; dkim=pass (test mode) header.i=@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
X-Google-Group-Id: 238405446264
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, <mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, <mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>,
 <mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: multipart/alternative; boundary=bcaec51a758e4c3d9e04a97effc9

--bcaec51a758e4c3d9e04a97effc9
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Tanks a lot for a detailed answer :-)
Dominique

Den 2. aug. 2011 05.18 skrev "Wayne Meissner" <wmeissner@gmail.com>
f=F8lgende:
> 2D arrays in structs are not supported by FFI - there's an issue for it
> (issue #18), but its not exactly a high priority, since only 2 people hav=
e

> asked for it in the last 2 years.
>
> You can work around it by declaring a struct type for the array width,
then
> declaring an array of that struct type.
> e.g.
>
> #require 'rubygems'
> require 'ffi'
>
> class DataArray < FFI::Struct
> layout :array, [ :uchar, 178 ]
>
> def [](idx)
> if idx.is_a?(Integer)
> self[:array][idx]
> else
> super(idx)
> end
> end
>
> def []=3D(idx, val)
> if idx.is_a?(Integer)
> self[:array][idx] =3D val
> else
> super(idx, val)
> end
> end
> end
>
> class Array2D < FFI::Struct
> layout :encoded_data, [ DataArray, 143 ]
> end
>
> ary =3D Array2D.new
> ary[:encoded_data][0][0] =3D 0x1
> ary[:encoded_data][0][1] =3D 0x2
> ary[:encoded_data][0][2] =3D 0x3
> ary[:encoded_data][1][0] =3D 0x4
> ary[:encoded_data][2][0] =3D 0x5
> ary[:encoded_data][3][0] =3D 0x6
>
>
> puts "ary[:encoded_data][0][0]=3D#{ary[:encoded_data][0][0]}"
> puts "ary[:encoded_data][0][1]=3D#{ary[:encoded_data][0][1]}"
> puts "ary[:encoded_data][1][0]=3D#{ary[:encoded_data][1][0]}"
> # idx=3D178 should correspond to ary[:encoded_data][1][0]
> puts "ary.pointer.get_char(178)=3D#{ary.pointer.get_char(178)}"
> # idx=3D356 should correspond to ary[:encoded_data][2][0]
> puts "ary.pointer.get_char(356)=3D#{ary.pointer.get_char(356)}"
>
>

--bcaec51a758e4c3d9e04a97effc9
Content-Type: text/html; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

<p>Tanks a lot for a detailed answer :-) <br>
Dominique </p>
<p>Den 2. aug. 2011 05.18 skrev &quot;Wayne Meissner&quot; &lt;<a href=3D"m=
ailto:wmeissner@gmail.com">wmeissner@gmail.com</a>&gt; f=F8lgende:<br type=
=3D"attribution">&gt; 2D arrays in structs are not supported by FFI - there=
&#39;s an issue for it <br>
&gt; (issue #18), but its not exactly a high priority, since only 2 people =
have <br>&gt; asked for it in the last 2 years.<br>&gt; <br>&gt; You can wo=
rk around it by declaring a struct type for the array width, then <br>&gt; =
declaring an array of that struct type.<br>
&gt; e.g.<br>&gt; <br>&gt; #require &#39;rubygems&#39;<br>&gt; require &#39=
;ffi&#39;<br>&gt; <br>&gt; class DataArray &lt; FFI::Struct<br>&gt;   layou=
t :array, [ :uchar, 178 ]<br>&gt; <br>&gt;   def [](idx)<br>&gt;     if idx=
.is_a?(Integer)<br>
&gt;       self[:array][idx]<br>&gt;     else<br>&gt;       super(idx)<br>&=
gt;     end<br>&gt;   end<br>&gt; <br>&gt;   def []=3D(idx, val)<br>&gt;   =
  if idx.is_a?(Integer)<br>&gt;       self[:array][idx] =3D val<br>&gt;    =
 else<br>
&gt;       super(idx, val)<br>&gt;     end<br>&gt;   end<br>&gt; end<br>&gt=
; <br>&gt; class Array2D &lt; FFI::Struct<br>&gt;   layout :encoded_data, [=
 DataArray, 143 ]<br>&gt; end<br>&gt; <br>&gt; ary =3D Array2D.new<br>&gt; =
ary[:encoded_data][0][0] =3D 0x1<br>
&gt; ary[:encoded_data][0][1] =3D 0x2<br>&gt; ary[:encoded_data][0][2] =3D =
0x3<br>&gt; ary[:encoded_data][1][0] =3D 0x4<br>&gt; ary[:encoded_data][2][=
0] =3D 0x5<br>&gt; ary[:encoded_data][3][0] =3D 0x6<br>&gt; <br>&gt; <br>&g=
t; puts &quot;ary[:encoded_data][0][0]=3D#{ary[:encoded_data][0][0]}&quot;<=
br>
&gt; puts &quot;ary[:encoded_data][0][1]=3D#{ary[:encoded_data][0][1]}&quot=
; <br>&gt; puts &quot;ary[:encoded_data][1][0]=3D#{ary[:encoded_data][1][0]=
}&quot;<br>&gt; # idx=3D178 should correspond to ary[:encoded_data][1][0]<b=
r>
&gt; puts &quot;ary.pointer.get_char(178)=3D#{ary.pointer.get_char(178)}&qu=
ot;<br>&gt; # idx=3D356 should correspond to ary[:encoded_data][2][0]<br>&g=
t; puts &quot;ary.pointer.get_char(356)=3D#{ary.pointer.get_char(356)}&quot=
;<br>
&gt; <br>&gt; <br></p>

--bcaec51a758e4c3d9e04a97effc9--
