Delivered-To: headius@headius.com
Received: by 10.114.184.4 with SMTP id h4cs19128waf;
        Sat, 12 Dec 2009 07:26:41 -0800 (PST)
Received: by 10.101.27.34 with SMTP id e34mr4282428anj.17.1260631601082;
        Sat, 12 Dec 2009 07:26:41 -0800 (PST)
Return-Path: <3L7YjSw0JCFQB3D0w6G09y40E28w47.yA8DGxK-1142AA2702DAGBE.yA8@listserv.bounces.google.com>
Received: from mail-gx0-f197.google.com (mail-gx0-f197.google.com [209.85.217.197])
        by mx.google.com with ESMTP id 6si5357849gxk.31.2009.12.12.07.26.40;
        Sat, 12 Dec 2009 07:26:41 -0800 (PST)
Received-SPF: pass (google.com: domain of 3L7YjSw0JCFQB3D0w6G09y40E28w47.yA8DGxK-1142AA2702DAGBE.yA8@listserv.bounces.google.com designates 209.85.217.197 as permitted sender) client-ip=209.85.217.197;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of 3L7YjSw0JCFQB3D0w6G09y40E28w47.yA8DGxK-1142AA2702DAGBE.yA8@listserv.bounces.google.com designates 209.85.217.197 as permitted sender) smtp.mail=3L7YjSw0JCFQB3D0w6G09y40E28w47.yA8DGxK-1142AA2702DAGBE.yA8@listserv.bounces.google.com
Received: by gxk21 with SMTP id 21sf538968gxk.7
        for <headius@headius.com>; Sat, 12 Dec 2009 07:26:40 -0800 (PST)
Received: by 10.90.7.11 with SMTP id 11mr613888agg.14.1260631599639;
        Sat, 12 Dec 2009 07:26:39 -0800 (PST)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.90.20.3 with SMTP id 3ls1538307agt.2.p; Sat, 12 Dec 2009 
	07:26:38 -0800 (PST)
Received: by 10.90.10.2 with SMTP id 2mr3726088agj.3.1260631598886;
        Sat, 12 Dec 2009 07:26:38 -0800 (PST)
Received: by 10.90.10.2 with SMTP id 2mr3726087agj.3.1260631598851;
        Sat, 12 Dec 2009 07:26:38 -0800 (PST)
Return-Path: <phreakuencies@gmail.com>
Received: from mail-yx0-f143.google.com (mail-yx0-f143.google.com [209.85.210.143])
        by gmr-mx.google.com with ESMTP id 18si335759gxk.7.2009.12.12.07.26.38;
        Sat, 12 Dec 2009 07:26:38 -0800 (PST)
Received-SPF: pass (google.com: domain of phreakuencies@gmail.com designates 209.85.210.143 as permitted sender) client-ip=209.85.210.143;
Received: by mail-yx0-f143.google.com with SMTP id 7so3671005yxe.25
        for <ruby-ffi@googlegroups.com>; Sat, 12 Dec 2009 07:26:38 -0800 (PST)
MIME-Version: 1.0
Received: by 10.101.180.39 with SMTP id h39mr251929anp.45.1260631598796; Sat, 
	12 Dec 2009 07:26:38 -0800 (PST)
Date: Sat, 12 Dec 2009 07:26:38 -0800 (PST)
X-IP: 190.224.110.44
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US) 
	AppleWebKit/532.0 (KHTML, like Gecko) Chrome/3.0.195.33 Safari/532.0,gzip(gfe),gzip(gfe)
Message-ID: <d9233847-c12b-4a66-9a0a-bfb9a1f8598c@j19g2000yqk.googlegroups.com>
Subject: [ruby-ffi] Crazy thought (wrapping rb_thread_blocking_region)
From: v01d <phreakuencies@gmail.com>
To: ruby-ffi <ruby-ffi@googlegroups.com>
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of phreakuencies@gmail.com designates 209.85.210.143 as permitted 
	sender) smtp.mail=phreakuencies@gmail.com
X-Original-Sender: phreakuencies@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=>
X-Thread-Url: http://groups.google.com/group/ruby-ffi/t/26440665daf6b519
X-Message-Url: http://groups.google.com/group/ruby-ffi/msg/7e4551afb319f53a
Sender: ruby-ffi@googlegroups.com
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1

Hi,
I'm a little interested in a possible future where Ruby could be used
for heavy processing stuff (but by means of calling computationally
heavy C code, and take advantage of multi-core processors by doing
several of these calls in parallel native threads) and I just found
out about Ruby's "rb_thread_blocking_region" C call.

What came to my mind is that maybe FFI could be used here to make
writing these type of parallelized Ruby extensions easier, by just
doing something like:

module RubyAPI
  extend FFI::Library
  attach_function :rb_thread_blocking_region,
[ :pointer, :pointer, :pointer ], :void
end

then maybe I'm wrapping a HeavyComputationLibrary:

module HeavyComputationLibrary
  extend FFI::Library
  attach_function :long_running_computation, [ :pointer ], :value
  attach_function :unblock_computation, [ :pointer ], :void
end

and then do something like:
RubyAPI.rb_thread_blocking_region
(HeavyComputationLibrary.long_running_computation, data_ptr,
HeavyComputationLibrary.unblock_computation)

Obviously there are a couple of non-existing things here (like passing
the function pointer of a C function (maybe there's already a way to
do that?), usage of :value), but I wanted to ask if this is feasible
or not.
I think that something like this could ease writing parallel-aware
Ruby extensions (maybe with some help of Ruby Inline) for existing C
libraries. Then again, I may be wrong.

Matt

PS: I'm obviously talking about Ruby 1.9 and the function call defined
here: http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/10252

