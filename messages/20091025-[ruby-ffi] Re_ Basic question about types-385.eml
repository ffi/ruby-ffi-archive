Delivered-To: headius@headius.com
Received: by 10.224.73.145 with SMTP id q17cs66183qaj;
        Sun, 25 Oct 2009 20:24:50 -0700 (PDT)
Received: by 10.114.237.19 with SMTP id k19mr2519711wah.69.1256527489896;
        Sun, 25 Oct 2009 20:24:49 -0700 (PDT)
Return-Path: <grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com>
Received: from mail-pw0-f68.google.com ([209.85.160.68])
        by mx.google.com with ESMTP id 42si8872216pxi.93.2009.10.25.20.24.48;
        Sun, 25 Oct 2009 20:24:48 -0700 (PDT)
Received-SPF: pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.160.68 as permitted sender) client-ip=209.85.160.68;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com designates 209.85.160.68 as permitted sender) smtp.mail=grbounce-oS_-awUAAACicsVXPUFstTOYQmrUJNfw=headius=headius.com@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pwi1 with SMTP id 1so852616pwi.27
        for <headius@headius.com>; Sun, 25 Oct 2009 20:24:48 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:received:x-sender:x-apparently-to
         :received:received:received:received-spf:received:dkim-signature
         :domainkey-signature:mime-version:received:in-reply-to:references
         :date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        bh=DTEVrKY2mBtR6D7gM31lE4BFAhnLlyYrxTa+J/eRizU=;
        b=huxtb7gjCvh7zyNsXvyBDTW0rdMQV8ABXwkFEaRw+qltuzCMKO5q4W5MdPWqz17set
         s+IyTqlKteYO74IS161fKyt0u5172CYp4QsUEEyHMO2i3XtF08ApupOH4BHxildgMbEu
         /CmGw151Cq9Y7xuZrG/KYPdb03iXvuoWgy6SA=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-sender:x-apparently-to:received-spf:authentication-results
         :dkim-signature:domainkey-signature:mime-version:in-reply-to
         :references:date:message-id:subject:from:to:content-type
         :content-transfer-encoding:reply-to:sender:precedence:x-google-loop
         :mailing-list:list-id:list-post:list-help:list-unsubscribe
         :x-beenthere-env:x-beenthere;
        b=H0vcDPMaErW5/b6IaasoXWPfYecdJT7p/dWTB4Ck42xUZw+KdT/ZCGAZjaM5EIzGoA
         x4DwfyuP7fa7w3HRhKZsZAHYwBPtf/PhEggknmJfDslHLI2RG7ruHU22k7w9Rbx3CzX0
         EQ66dVPbjrQyyHvc0ElhgOB2cXVFgARQQ9j2g=
Received: by 10.142.9.32 with SMTP id 32mr316533wfi.19.1256527487059;
        Sun, 25 Oct 2009 20:24:47 -0700 (PDT)
Received: by 10.106.63.16 with SMTP id l16gr65pra.0;
	Sun, 25 Oct 2009 20:24:47 -0700 (PDT)
X-Sender: wmeissner@gmail.com
X-Apparently-To: ruby-ffi@googlegroups.com
Received: by 10.115.145.1 with SMTP id x1mr2265486wan.9.1256527486118; Sun, 25 Oct 2009 20:24:46 -0700 (PDT)
Received: by 10.115.145.1 with SMTP id x1mr2265485wan.9.1256527486094; Sun, 25 Oct 2009 20:24:46 -0700 (PDT)
Return-Path: <wmeissner@gmail.com>
Received: from mail-px0-f193.google.com (mail-px0-f193.google.com [209.85.216.193]) by gmr-mx.google.com with ESMTP id 39si674351pxi.11.2009.10.25.20.24.45; Sun, 25 Oct 2009 20:24:45 -0700 (PDT)
Received-SPF: pass (google.com: domain of wmeissner@gmail.com designates 209.85.216.193 as permitted sender) client-ip=209.85.216.193;
Received: by pxi31 with SMTP id 31so3058143pxi.20 for <ruby-ffi@googlegroups.com>; Sun, 25 Oct 2009 20:24:45 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed; d=gmail.com; s=gamma; h=domainkey-signature:mime-version:received:in-reply-to:references :date:message-id:subject:from:to:content-type :content-transfer-encoding; bh=6khOG5paTpqo8AL8E6t+2RhzkBP53a95fwKUThEE+Fs=; b=QBwXOJijTZhccedXXepsrsEr5NH2qQA3l5+P0A2cx0gbPXpk2bWLynVh3ph/D8zKIQ 3HUnQfTfSYziePj4ub5xzJEAyZFQiOleQKbxsfwJV9g/0wCx/cqjM4rv8MnOlXRZMiW8 8DHvMd14a2GYE1+j98X0DtldQ+KYM53DQpsYU=
DomainKey-Signature: a=rsa-sha1; c=nofws; d=gmail.com; s=gamma; h=mime-version:in-reply-to:references:date:message-id:subject:from:to :content-type:content-transfer-encoding; b=FByd2hDeEqFMzj/MPy5nCfdxK5k1mMwV8fcq+F1K80dbzct40fjg7BHr5TW6oU9B2r vjVZzhOx7F/FgKVTij0R7V9KBefGC4kUoo8FUBs/0ENxOhMiiZSVjvopG3vP9c37rVpo +VCnxHKrRcITnUM+eQWaWQVAft/Zzf3V4sg6Q=
MIME-Version: 1.0
Received: by 10.140.133.4 with SMTP id g4mr1960549rvd.287.1256527485000; Sun,  25 Oct 2009 20:24:45 -0700 (PDT)
In-Reply-To: <edc63d8a-4d10-4c3a-9301-c3dd2907afcd@u16g2000pru.googlegroups.com>
References: <953aaf26-bb32-43e9-b31f-0d32a3b78837@33g2000vbe.googlegroups.com> <f6117030-374b-4007-a7ab-fe2258e60b7c@y32g2000prd.googlegroups.com> <4ccee320910201621u55a9ba1bvcea84a660fe49eab@mail.gmail.com> <edc63d8a-4d10-4c3a-9301-c3dd2907afcd@u16g2000pru.googlegroups.com>
Date: Mon, 26 Oct 2009 13:24:44 +1000
Message-ID: <4ccee320910252024ra687ceg449523ee72b0d089@mail.gmail.com>
Subject: [ruby-ffi] Re: Basic question about types
From: Wayne Meissner <wmeissner@gmail.com>
To: ruby-ffi@googlegroups.com
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable
Reply-To: ruby-ffi@googlegroups.com
Sender: ruby-ffi@googlegroups.com
Precedence: bulk
X-Google-Loop: groups
Mailing-List: list ruby-ffi@googlegroups.com;
	contact ruby-ffi+owner@googlegroups.com
List-Id: <ruby-ffi.googlegroups.com>
List-Post: <mailto:ruby-ffi@googlegroups.com>
List-Help: <mailto:ruby-ffi+help@googlegroups.com>
List-Unsubscribe: <http://googlegroups.com/group/ruby-ffi/subscribe>,
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
X-BeenThere-Env: ruby-ffi@googlegroups.com
X-BeenThere: ruby-ffi@googlegroups.com


In general, no, you can't call va_list functions.=A0 I mean, technically
it is possible if you allocate memory, pack the arguments in the same
way the native code would, then pass that pointer in (I think), but if
you have the choice, you may as well call the varargs version.

FFI could be made do that behind the scenes - it just hasn't come up
before.  Would be a good project for someone, so if you want it, add
it to the issue tracker (http://github.com/ffi/ffi/issues), and
someone may pick it up.

2009/10/22 Gimi <liang.gimi@gmail.com>:
>
> Thank you very much Wayne, thank you for your so-detailed replies!
>
> For the 2nd question, I'd already known about :varargs and its usage.
> My question is how about a function which uses va_list as a parameter,
> like this:
> int vprintf ( const char * format, va_list arg );
>
> According to my test, it's impossible to do it in this way:
> #-- code --
> attach_function :vprintf, [:string, :varargs], :int
> # -- code end --
>
> As va_llist actually is void*, =A0so I guess I should do:
> #-- code --
> attach_function :vprintf, [:string, :pointer], :int
> #-- code end --
> But I don't know how to call it.
>
> Although it's not important to do that because there are always(i
> guess) a :varargs version for this kind of va_list-style-function, I
> just want to know is it possible to do this in Ruby-FFI.
>
> With many thanks!
>
>
> Sincerely,
> Gimi
>
> On Oct 21, 7:21=A0am, Wayne Meissner <wmeiss...@gmail.com> wrote:
>> You specifiy variadic parameters as :varargs, and when you call the
>> function, you need to explicitly specify the type of the parameters.
>> e.g.
>> # this says printf takes a string parameter, followed by a variable
>> number of parameters
>> =A0 attach_function :printf, [ :string, :varargs ], :int
>>
>> # You don't need to specify the type of any fixed params, since it is pa=
rt of
>> # the function signature, but you do need to for each varargs parameter
>>
>> LibC.printf("Hello, %s", :string, "World")
>>
>> 2009/10/21 Gimi <liang.g...@gmail.com>:
>>
>>
>>
>>
>>
>> > Hi, it's me again : )
>>
>> > I just wanna ask one more question, how to deal with the va_list
>> > parameter? Like the vprintf method, how to attach and call it?
>>
>> > With many thanks!
>> > Gimi
>>
>> > On Oct 20, 10:10=A0am, Gimi <liang.g...@gmail.com> wrote:
>> >> Hi all,
>>
>> >> I'm new to FFI, and I have a basic question about types. Assume there
>> >> is some C code like this:
>> >> # -- C code begin --
>> >> #if some situation
>> >> typedef sometype unsignedint
>> >> #else
>> >> typedef sometype int
>> >> #endif
>>
>> >> void some_function(sometype);
>> >> #-- C code end --
>>
>> >> So I mean when the types of parameters of a function are different in
>> >> different situations, how do I write the Ruby code?
>>
>> >> Any help will be greatly appreciated.
>>
>> >> Regards,
