Delivered-To: headius@headius.com
Received: by 10.100.134.8 with SMTP id h8cs636823and;
        Wed, 23 Dec 2009 09:49:02 -0800 (PST)
Received: by 10.150.239.15 with SMTP id m15mr15773916ybh.336.1261590539884;
        Wed, 23 Dec 2009 09:48:59 -0800 (PST)
Return-Path: <3CVgySwoJCN4JON.FORUMSGMAIL.COMRUBY-FFIGOOGLEGROUPS.COM@listserv.bounces.google.com>
Received: from mail-yx0-f142.google.com (mail-yx0-f142.google.com [209.85.210.142])
        by mx.google.com with ESMTP id 8si11104864ywh.76.2009.12.23.09.48.58;
        Wed, 23 Dec 2009 09:48:58 -0800 (PST)
Received-SPF: pass (google.com: domain of 3CVgySwoJCN4JON.FORUMSGMAIL.COMRUBY-FFIGOOGLEGROUPS.COM@listserv.bounces.google.com designates 209.85.210.142 as permitted sender) client-ip=209.85.210.142;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of 3CVgySwoJCN4JON.FORUMSGMAIL.COMRUBY-FFIGOOGLEGROUPS.COM@listserv.bounces.google.com designates 209.85.210.142 as permitted sender) smtp.mail=3CVgySwoJCN4JON.FORUMSGMAIL.COMRUBY-FFIGOOGLEGROUPS.COM@listserv.bounces.google.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by yxe6 with SMTP id 6sf7328703yxe.13
        for <headius@headius.com>; Wed, 23 Dec 2009 09:48:58 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:received:received:received:date:from:to
         :subject:message-id:in-reply-to:references:x-mailer:mime-version
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :x-thread-url:x-message-url:sender:list-unsubscribe:list-subscribe
         :content-type:content-transfer-encoding;
        bh=yfH9jadfj17oYJo/i6tbbTBrU1uFB46W7HHpwCH+ymw=;
        b=Eg4MVjF3pWHFsaCWGsNyGD8Zrs1SZSXzyvLhu6D03KWlyHUojODBfpbpGOAOoGEokn
         S/kR0eo8no27QzvexW+aaUv33jXg90+DgBas42thKZE75fmG4TtBdiReQWagd0CIzhQy
         WWUaA5Al9xHSKX9fm1TJx4XnY1bnVps1oZi9g=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:date:from:to:subject:message-id
         :in-reply-to:references:x-mailer:mime-version
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :x-thread-url:x-message-url:sender:list-unsubscribe:list-subscribe
         :content-type:content-transfer-encoding;
        b=Cq87NIWJHttQIJ0Ur3phM4agKj/IeBZQ9aCgtVuPpcCdOthPx59oLaJbz8PXwJf5AD
         26fv6pZvq0rK/UsNtApBe94HQhukPMYQUgYBQDjxBmMoB2RFXTBJORxcFav8v4zXdGfX
         64a8d8FHEqqjfFL69jZ8tufstGNT9qNjh7ZtI=
Received: by 10.101.16.13 with SMTP id t13mr56922ani.7.1261590537802;
        Wed, 23 Dec 2009 09:48:57 -0800 (PST)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.90.20.3 with SMTP id 3ls70243agt.2.p; Wed, 23 Dec 2009 
	09:48:56 -0800 (PST)
Received: by 10.91.163.12 with SMTP id q12mr9106182ago.4.1261590536356;
        Wed, 23 Dec 2009 09:48:56 -0800 (PST)
Received: by 10.91.163.12 with SMTP id q12mr9106179ago.4.1261590536322;
        Wed, 23 Dec 2009 09:48:56 -0800 (PST)
Return-Path: <jon.forums@gmail.com>
Received: from mail-yx0-f202.google.com (mail-yx0-f202.google.com [209.85.210.202])
        by gmr-mx.google.com with ESMTP id 12si1120820gxk.14.2009.12.23.09.48.55;
        Wed, 23 Dec 2009 09:48:55 -0800 (PST)
Received-SPF: pass (google.com: domain of jon.forums@gmail.com designates 209.85.210.202 as permitted sender) client-ip=209.85.210.202;
Received: by yxe40 with SMTP id 40so7315664yxe.28
        for <ruby-ffi@googlegroups.com>; Wed, 23 Dec 2009 09:48:55 -0800 (PST)
Received: by 10.150.80.20 with SMTP id d20mr5004059ybb.141.1261590535199;
        Wed, 23 Dec 2009 09:48:55 -0800 (PST)
Return-Path: <jon.forums@gmail.com>
Received: from Red (rrcs-24-172-153-250.central.biz.rr.com [24.172.153.250])
        by mx.google.com with ESMTPS id 20sm6475375iwn.5.2009.12.23.09.48.53
        (version=TLSv1/SSLv3 cipher=RC4-MD5);
        Wed, 23 Dec 2009 09:48:53 -0800 (PST)
Date: Wed, 23 Dec 2009 12:48:38 -0500
From: Jon <jon.forums@gmail.com>
To: ruby-ffi@googlegroups.com
Subject: Re: [ruby-ffi] Struct/ManagedStruct and GC behaviour
Message-Id: <20091223124838.db57d626.jon.forums@gmail.com>
In-Reply-To: <21ef583e0912211532u715e2a20s3bbba0d62d003110@mail.gmail.com>
References: <20091221152637.62654e37.jon.forums@gmail.com>
	<80BBF3AC-C15C-4844-A6DD-34A3B9218A35@fallingsnow.net>
	<20091221162106.9ffa1f6f.jon.forums@gmail.com>
	<21ef583e0912211333m3da990e7w337f75ae50054b42@mail.gmail.com>
	<4ccee320912211420v691a1119ibd25abbbe57bc445@mail.gmail.com>
	<21ef583e0912211532u715e2a20s3bbba0d62d003110@mail.gmail.com>
X-Mailer: Sylpheed 2.7.1 (GTK+ 2.10.14; i686-pc-mingw32)
Mime-Version: 1.0
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of jon.forums@gmail.com designates 209.85.210.202 as permitted sender) 
	smtp.mail=jon.forums@gmail.com; dkim=pass (test mode) header.i=@gmail.com
X-Original-Sender: jon.forums@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=>
X-Thread-Url: http://groups.google.com/group/ruby-ffi/t/509f727c52cb337
X-Message-Url: http://groups.google.com/group/ruby-ffi/msg/3b5910bab6145661
Sender: ruby-ffi@googlegroups.com
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

> On Mon, Dec 21, 2009 at 4:20 PM, Wayne Meissner <wmeissner@gmail.com> wro=
te:
> > 2009/12/22 Thomas E Enebo <tom.enebo@gmail.com>:
> >> I have been wondering about the Struct API myself. =A0 It seems like it
> >> should support a simple explicit memory management API ala:
> >>
> >> class MyFFIStruct < FFI::Struct ....
> >>
> >> MyFFIStruct.new do |struct_instance|
> >> =A0 some_ffi_call struct_instance
> >> =A0 # Do other stuff....
> >> end
> >> # I know the block has disposed of my allocated struct
> >
> > It does support this indirectly via MemoryPointer.new
> > e.g.
> > =A0MemoryPointer.new(MyFFIStruct.size) do |p|
> > =A0 =A0s =3D MyFFIStruct.new(p)
> > =A0 =A0some_ffi_call s
> > =A0 =A0# do other stuff
> > =A0end
> >
> > An alternative is to use FFI::Buffer as the backing memory - on JRuby,
> > that is jvm-heap memory, which is copied in/out of a temporary native
> > memory area (usually on the stack) when passed to a native function.
> > For small structs, especially ones that are passed to a native
> > function just once, this can be up to 10x faster than the alloc/free
> > cycle of a MemoryPointer backed Struct.
>=20
> Thanks for the additional info and the code snippet for explicit
> management.  Personally, I think that an explicit API like this should
> be the norm since there are no guarantees on when GC happens and in my
> experience it is much longer than most people expect.   I think too
> many people believe in magic and the only way to combat it is to make
> the implicit stuff be more typing (or the explicit stuff less typing).
>   I will probably make a class method in Struct which allows something
> like:
>=20
> MyFFStruct.create do |struct|
> ...
> end
>=20
> Under the covers it will do what you demonstrated above:
>=20
> def self.create(&block)
>     MemoryPointer.new(size) { |p| block.call new(p) }
> end
>=20
> Or something like this...
>=20
> -Tom


As another API-level option to Tom's, where's the holes this wild-eyed-unre=
searched-NOT-a-proposal brainstorming idea?

module FFI
  def self.autofree(instance, free_proc=3Dnil, options=3D{}, &block)
    # do your stuff in your block
    # if your instance has a 'free', i'll call it (ruby specific cleanup)
    # don't give me a 'free_proc' and i'll call my FFI::DEFAULT_FREE Proc t=
o free your native resources (!?)
    # give me a 'free_proc' and i'll call it to free your native resources
  end

typical usage:

  autofree MyFFIStruct.new do |instance|
    ...
  end


* explicit
* applicable to any instance (!!??)
* similar usage to Python's 'with'[1] and C#'s 'using' statements
* handle 80% of common usage cases via the FFI::DEFAULT_FREE Proc while pro=
viding an escape hatch to address Evan's comments and Wayne's "no-win" comm=
ent (does a custom 'free_proc' Proc open up the door to a bunch of circular=
 dependency issues?)
* abstracts impl-specific stuff to address Wayne's "in hindsight [refactori=
ng]" comments (potential for reusing/repacking much of the existing battle-=
tested ffi code?)
* provides maximum flexibility to the different ffi implementations?


I still need to dig around in the nokogiri ffi code Wayne mentioned as well=
 as the autopointer, etc code, but this little mind virus needs more & diff=
erent perspectives than I'm able to give it :( =20

Jon


[1] http://docs.python.org/reference/compound_stmts.html#the-with-statement
