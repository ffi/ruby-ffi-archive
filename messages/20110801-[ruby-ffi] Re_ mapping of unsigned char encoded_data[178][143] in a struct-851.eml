Delivered-To: headius@headius.com
Received: by 10.14.187.140 with SMTP id y12cs125575eem;
        Mon, 1 Aug 2011 20:18:32 -0700 (PDT)
Received: by 10.68.11.131 with SMTP id q3mr2048880pbb.511.1312255111063;
        Mon, 01 Aug 2011 20:18:31 -0700 (PDT)
Return-Path: <ruby-ffi+bncCPS3mqGKCBCA2d3xBBoE-y1Zyg@googlegroups.com>
Received: from mail-pz0-f56.google.com (mail-pz0-f56.google.com [209.85.210.56])
        by mx.google.com with ESMTPS id f10si17370949wfg.41.2011.08.01.20.18.29
        (version=TLSv1/SSLv3 cipher=OTHER);
        Mon, 01 Aug 2011 20:18:30 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCPS3mqGKCBCA2d3xBBoE-y1Zyg@googlegroups.com designates 209.85.210.56 as permitted sender) client-ip=209.85.210.56;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCPS3mqGKCBCA2d3xBBoE-y1Zyg@googlegroups.com designates 209.85.210.56 as permitted sender) smtp.mail=ruby-ffi+bncCPS3mqGKCBCA2d3xBBoE-y1Zyg@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by pzk33 with SMTP id 33sf23355617pzk.21
        for <headius@headius.com>; Mon, 01 Aug 2011 20:18:29 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=x-beenthere:date:from:reply-to:to:message-id:in-reply-to:references
         :subject:mime-version:x-original-sender:precedence:mailing-list
         :list-id:x-google-group-id:list-post:list-help:list-archive:sender
         :list-subscribe:list-unsubscribe:content-type;
        bh=5v4ckC9XRNOBwd2uyZkU3L35jso4cneAPj1X2XuhL94=;
        b=rGbFhK+33Om8zmK33u5+b+0u/dFZEUbRI0nxL0lKig5JxAya5E8SymAWbEx7xyQW5O
         fz0RJ4rwSEcUEUaQvyVVXDiwrJTd4GsiN4J3FJ9Gg7mWzV9HUwr42lyeDmB7nXuo5q9P
         j7O4XddByb0Wtgf7I22owUcKLmTUna5RBVhbs=
Received: by 10.68.14.226 with SMTP id s2mr1333102pbc.28.1312255104400;
        Mon, 01 Aug 2011 20:18:24 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.68.0.233 with SMTP id 9ls4526886pbh.3.gmail; Mon, 01 Aug 2011
 20:18:24 -0700 (PDT)
Received: by 10.68.27.194 with SMTP id v2mr667666pbg.74.1312255104124;
        Mon, 01 Aug 2011 20:18:24 -0700 (PDT)
Date: Mon, 1 Aug 2011 20:18:23 -0700 (PDT)
From: Wayne Meissner <wmeissner@gmail.com>
Reply-To: ruby-ffi@googlegroups.com
To: ruby-ffi@googlegroups.com
Message-ID: <121228.106.1312255103140.JavaMail.geo-discussion-forums@prhz13>
In-Reply-To: <8db95be6-f27e-41ff-b6d8-b381f40b0362@p20g2000yqp.googlegroups.com>
References: <8db95be6-f27e-41ff-b6d8-b381f40b0362@p20g2000yqp.googlegroups.com>
Subject: [ruby-ffi] Re: mapping of unsigned char encoded_data[178][143] in a struct
MIME-Version: 1.0
X-Original-Sender: wmeissner@gmail.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
X-Google-Group-Id: 238405446264
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, <mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, <mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>,
 <mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: multipart/alternative; 
	boundary="----=_Part_105_10309704.1312255103139"

------=_Part_105_10309704.1312255103139
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 7bit

2D arrays in structs are not supported by FFI - there's an issue for it 
(issue #18), but its not exactly a high priority, since only 2 people have 
asked for it in the last 2 years.

You can work around it by declaring a struct type for the array width, then 
declaring an array of that struct type.
e.g.

#require 'rubygems'
require 'ffi'

class DataArray < FFI::Struct
  layout :array, [ :uchar, 178 ]

  def [](idx)
    if idx.is_a?(Integer)
      self[:array][idx]
    else
      super(idx)
    end
  end

  def []=(idx, val)
    if idx.is_a?(Integer)
      self[:array][idx] = val
    else
      super(idx, val)
    end
  end
end

class Array2D < FFI::Struct
  layout :encoded_data, [ DataArray, 143 ]
end

ary = Array2D.new
ary[:encoded_data][0][0] = 0x1
ary[:encoded_data][0][1] = 0x2
ary[:encoded_data][0][2] = 0x3
ary[:encoded_data][1][0] = 0x4
ary[:encoded_data][2][0] = 0x5
ary[:encoded_data][3][0] = 0x6


puts "ary[:encoded_data][0][0]=#{ary[:encoded_data][0][0]}"
puts "ary[:encoded_data][0][1]=#{ary[:encoded_data][0][1]}" 
puts "ary[:encoded_data][1][0]=#{ary[:encoded_data][1][0]}"
# idx=178 should correspond to ary[:encoded_data][1][0]
puts "ary.pointer.get_char(178)=#{ary.pointer.get_char(178)}"
# idx=356 should correspond to ary[:encoded_data][2][0]
puts "ary.pointer.get_char(356)=#{ary.pointer.get_char(356)}"



------=_Part_105_10309704.1312255103139
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

2D arrays in structs are not supported by FFI - there's an issue for it (is=
sue #18), but its not exactly a high priority, since only 2 people have ask=
ed for it in the last 2 years.<div><br></div><div>You can work around it by=
 declaring a struct type for the array width, then declaring an array of th=
at struct type.</div><div>e.g.</div><div><br></div><div><div>#require 'ruby=
gems'</div><div>require 'ffi'</div><div><br></div><div>class DataArray &lt;=
 FFI::Struct</div><div>&nbsp; layout :array, [ :uchar, 178 ]</div><div><br>=
</div><div>&nbsp; def [](idx)</div><div>&nbsp; &nbsp; if idx.is_a?(Integer)=
</div><div>&nbsp; &nbsp; &nbsp; self[:array][idx]</div><div>&nbsp; &nbsp; e=
lse</div><div>&nbsp; &nbsp; &nbsp; super(idx)</div><div>&nbsp; &nbsp; end</=
div><div>&nbsp; end</div><div><br></div><div>&nbsp; def []=3D(idx, val)</di=
v><div>&nbsp; &nbsp; if idx.is_a?(Integer)</div><div>&nbsp; &nbsp; &nbsp; s=
elf[:array][idx] =3D val</div><div>&nbsp; &nbsp; else</div><div>&nbsp; &nbs=
p; &nbsp; super(idx, val)</div><div>&nbsp; &nbsp; end</div><div>&nbsp; end<=
/div><div>end</div><div><br></div><div>class Array2D &lt; FFI::Struct</div>=
<div>&nbsp; layout :encoded_data, [ DataArray, 143 ]</div><div>end</div><di=
v><br></div><div>ary =3D Array2D.new</div><div>ary[:encoded_data][0][0] =3D=
 0x1</div><div>ary[:encoded_data][0][1] =3D 0x2</div><div>ary[:encoded_data=
][0][2] =3D 0x3</div><div>ary[:encoded_data][1][0] =3D 0x4</div><div>ary[:e=
ncoded_data][2][0] =3D 0x5</div><div>ary[:encoded_data][3][0] =3D 0x6</div>=
<div><br></div><div><br></div><div>puts "ary[:encoded_data][0][0]=3D#{ary[:=
encoded_data][0][0]}"</div><div>puts "ary[:encoded_data][0][1]=3D#{ary[:enc=
oded_data][0][1]}"&nbsp;</div><div>puts "ary[:encoded_data][1][0]=3D#{ary[:=
encoded_data][1][0]}"</div><div># idx=3D178 should correspond to ary[:encod=
ed_data][1][0]</div><div>puts "ary.pointer.get_char(178)=3D#{ary.pointer.ge=
t_char(178)}"</div><div># idx=3D356 should correspond to ary[:encoded_data]=
[2][0]</div><div>puts "ary.pointer.get_char(356)=3D#{ary.pointer.get_char(3=
56)}"</div><div><br></div><div><br></div></div>
------=_Part_105_10309704.1312255103139--
