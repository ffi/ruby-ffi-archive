Delivered-To: headius@headius.com
Received: by 10.223.71.205 with SMTP id i13cs11990faj;
        Fri, 18 Mar 2011 05:43:22 -0700 (PDT)
Received: by 10.90.187.7 with SMTP id k7mr1143285agf.151.1300452201297;
        Fri, 18 Mar 2011 05:43:21 -0700 (PDT)
Return-Path: <ruby-ffi+bncCJ2jt8vbBhDkpo3sBBoERRenVw@googlegroups.com>
Received: from mail-gx0-f190.google.com (mail-gx0-f190.google.com [209.85.161.190])
        by mx.google.com with ESMTPS id x36si7892203ana.55.2011.03.18.05.43.20
        (version=TLSv1/SSLv3 cipher=OTHER);
        Fri, 18 Mar 2011 05:43:21 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDkpo3sBBoERRenVw@googlegroups.com designates 209.85.161.190 as permitted sender) client-ip=209.85.161.190;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCJ2jt8vbBhDkpo3sBBoERRenVw@googlegroups.com designates 209.85.161.190 as permitted sender) smtp.mail=ruby-ffi+bncCJ2jt8vbBhDkpo3sBBoERRenVw@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by gxk7 with SMTP id 7sf6015922gxk.7
        for <headius@headius.com>; Fri, 18 Mar 2011 05:43:20 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:x-beenthere:received-spf:mime-version
         :x-proofpoint-virus-version:x-proofpoint-spam-details:subject:from
         :in-reply-to:date:message-id:references:to:x-mailer
         :x-original-sender:x-original-authentication-results:reply-to
         :precedence:mailing-list:list-id:x-google-group-id:list-post
         :list-help:list-archive:sender:list-subscribe:list-unsubscribe
         :content-type:content-transfer-encoding;
        bh=5Dl6wBKA4jROj1GQKLiMye8Zj+t5pWErQ5JQ0zmxA/Y=;
        b=pUQD66FCwUHeSfkeEyLjREKcSRJRCpBkInufEs4dSy8nTmGEepQhPlbSLNhRPmOCR6
         mh3XT8fjrj9OgLurIswnmv9vu9qlVRHEN+RTw7VMsfaep8GUzCH0oHK9v2jzjEq9wC+9
         jpKVlnnavyGxmGTWR0rvZykA8uehXZ1s3oOG4=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:x-proofpoint-virus-version
         :x-proofpoint-spam-details:subject:from:in-reply-to:date:message-id
         :references:to:x-mailer:x-original-sender
         :x-original-authentication-results:reply-to:precedence:mailing-list
         :list-id:x-google-group-id:list-post:list-help:list-archive:sender
         :list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        b=fIw3xkqPubBboABWxWjnssiw+mK2882TwzIJZpwtk8F+t0PHKhzXwQqlUGyMAGjN4F
         muxVTCYcowgIowZJAZGqdUFerUneVbHD6E7DHDb/BiGlqLeR0RH2x1687RlugPOc7RqK
         AOTy3jSeZz9Rg7hA1OvBfCb+i5PZxhhSeWRHw=
Received: by 10.91.85.9 with SMTP id n9mr165249agl.3.1300452196040;
        Fri, 18 Mar 2011 05:43:16 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.231.1.79 with SMTP id 15ls121987ibe.0.p; Fri, 18 Mar 2011
 05:43:15 -0700 (PDT)
Received: by 10.231.185.155 with SMTP id co27mr715623ibb.8.1300452195549;
        Fri, 18 Mar 2011 05:43:15 -0700 (PDT)
Received: by 10.231.185.155 with SMTP id co27mr715622ibb.8.1300452195531;
        Fri, 18 Mar 2011 05:43:15 -0700 (PDT)
Received: from asmtpout021.mac.com (asmtpout021.mac.com [17.148.16.96])
        by gmr-mx.google.com with ESMTP id d9si936395ibq.3.2011.03.18.05.43.15;
        Fri, 18 Mar 2011 05:43:15 -0700 (PDT)
Received-SPF: pass (google.com: domain of cremes.devlist@mac.com designates 17.148.16.96 as permitted sender) client-ip=17.148.16.96;
MIME-version: 1.0
Received: from [192.168.1.100]
 (c-71-239-242-179.hsd1.il.comcast.net [71.239.242.179])
 by asmtp021.mac.com (Oracle Communications Messaging Exchange Server 7u4-20.01
 64bit (built Nov 21 2010)) with ESMTPSA id <0LI90029F7BWIG10@asmtp021.mac.com>
 for ruby-ffi@googlegroups.com; Fri, 18 Mar 2011 05:43:09 -0700 (PDT)
X-Proofpoint-Virus-Version: vendor=fsecure
 engine=2.50.10432:5.2.15,1.0.148,0.0.0000
 definitions=2011-03-18_03:2011-03-16,2011-03-18,1970-01-01 signatures=0
X-Proofpoint-Spam-Details: rule=notspam policy=default score=0 spamscore=0
 ipscore=0 suspectscore=3 phishscore=0 bulkscore=0 adultscore=0 classifier=spam
 adjust=0 reason=mlx engine=6.0.2-1012030000 definitions=main-1103180050
Subject: Re: [ruby-ffi] why FFI::MemoryPointer is autoconverted into
 FFI::Pointer in a FFI::Struct?
From: Chuck Remes <cremes.devlist@mac.com>
In-reply-to: <21f36109-51c4-4c2a-9793-ef98e4b47d8f@k38g2000vbn.googlegroups.com>
Date: Fri, 18 Mar 2011 07:43:08 -0500
Message-id: <20A919BD-E7D2-4E60-A635-EEAB9D60D564@mac.com>
References: <21f36109-51c4-4c2a-9793-ef98e4b47d8f@k38g2000vbn.googlegroups.com>
To: ruby-ffi@googlegroups.com
X-Mailer: Apple Mail (2.1082)
X-Original-Sender: cremes.devlist@mac.com
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com:
 domain of cremes.devlist@mac.com designates 17.148.16.96 as permitted sender) smtp.mail=cremes.devlist@mac.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
X-Google-Group-Id: 238405446264
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, <mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, <mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>,
 <mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-type: text/plain; charset=iso-8859-1
Content-transfer-encoding: quoted-printable


On Mar 18, 2011, at 5:02 AM, Jes=FAs GS wrote:

> Hi,
>=20
> I'm really confuse with this behaviour. I think I'm missing some
> concept of memory management of ffi.
>=20
> Let's imagine a C library with something like:
>=20
> struct foo
> {
>    void *p;
> };
> void some_function( struct foo * in_parameter );
>=20
> =46rom ruby we are gonna create that struct before call the function,
> with something similar to:
>>> require 'ffi'
> =3D> true
>>> class Foo < FFI::Struct; layout :p, :pointer; end
> =3D> #<FFI::StructLayout:0x1f0f0c8>
>>> foo =3D Foo.new
> =3D> #<Foo:0x1a15597>
>>> foo[:p] =3D my_pointer =3D FFI::MemoryPointer.new(:int, 100)
> =3D> #<MemoryPointer address=3D0xb3c06380 size=3D400>
>>> foo[:p]
> =3D> #<Pointer address=3D0xb3c06380>
>>> my_pointer
> =3D> #<MemoryPointer address=3D0xb3c06380 size=3D400>
>=20
>=20
> I cannot free a Pointer (only MemoryPointer), so what should I do?
> Create a free_struct_foo( void * p ); function in C? Ignore it because
> I don't need to free that allocated memory or just hope no memory
> leaks will happen?.

I handle a similar situation by calling #attach_function on LibC's free =
function.

cr

