Delivered-To: headius@headius.com
Received: by 10.229.186.206 with SMTP id ct14cs22612qcb;
        Tue, 11 May 2010 11:03:15 -0700 (PDT)
Received: by 10.231.152.78 with SMTP id f14mr4453078ibw.51.1273600994616;
        Tue, 11 May 2010 11:03:14 -0700 (PDT)
Return-Path: <ruby-ffi+bncCMPYuayYERDft6bfBBoEfE4ueQ@googlegroups.com>
Received: from mail-qy0-f139.google.com (mail-qy0-f139.google.com [209.85.221.139])
        by mx.google.com with ESMTP id 27si12444842yxe.17.2010.05.11.11.03.13;
        Tue, 11 May 2010 11:03:13 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCMPYuayYERDft6bfBBoEfE4ueQ@googlegroups.com designates 209.85.221.139 as permitted sender) client-ip=209.85.221.139;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCMPYuayYERDft6bfBBoEfE4ueQ@googlegroups.com designates 209.85.221.139 as permitted sender) smtp.mail=ruby-ffi+bncCMPYuayYERDft6bfBBoEfE4ueQ@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by qyk4 with SMTP id 4sf190215qyk.19
        for <headius@headius.com>; Tue, 11 May 2010 11:03:13 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=domainkey-signature:received:x-beenthere:received:received:received
         :received:received-spf:received:mime-version:received:received
         :in-reply-to:references:date:message-id:subject:from:to
         :x-original-authentication-results:x-original-sender:reply-to
         :precedence:mailing-list:list-id:list-post:list-help:list-archive
         :sender:list-subscribe:list-unsubscribe:content-type;
        bh=gRTNHqQ9fFPTM7GtasTJ1aDuSWWr33LnuRtUFwxJ7B0=;
        b=qptasffry2WKCo/qrAuIXhBXx+1RLCP0yYoT55QxFaD58r9haCCiHaLyeuYBSACSMb
         3Wm0IkT1R2XgqE6jFQkdkNVGIS36PE40SW7VTE/pJ0K8u5s244+VFtKyl67+cZ/BdYyb
         X2CQdZKS9p+lR3aClEjNlL6vUtBuSCzWYgc/c=
DomainKey-Signature: a=rsa-sha1; c=nofws;
        d=googlegroups.com; s=beta;
        h=x-beenthere:received-spf:mime-version:in-reply-to:references:date
         :message-id:subject:from:to:x-original-authentication-results
         :x-original-sender:reply-to:precedence:mailing-list:list-id
         :list-post:list-help:list-archive:sender:list-subscribe
         :list-unsubscribe:content-type;
        b=a9rFfoTlcAXJEXOhZG2zSistibh3c75K55x8/vnnCKpmPurt5/qpO3GChLG7BPhESc
         xvOoWvw9CMypbAm/nri9TOhGqX+oyccc1cIJm+sc1q7w8MPRR8wTvh5TpfLTi5QIbiD4
         cFO0yFp1GrXL9x2EZwBjFPW1XEIdXF1lfTshU=
Received: by 10.229.78.86 with SMTP id j22mr412781qck.33.1273600991274;
        Tue, 11 May 2010 11:03:11 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.229.210.31 with SMTP id gi31ls17232307qcb.0.p; Tue, 11 May 
	2010 11:03:10 -0700 (PDT)
Received: by 10.229.213.144 with SMTP id gw16mr705723qcb.16.1273600990695;
        Tue, 11 May 2010 11:03:10 -0700 (PDT)
Received: by 10.229.213.144 with SMTP id gw16mr705721qcb.16.1273600990400;
        Tue, 11 May 2010 11:03:10 -0700 (PDT)
Return-Path: <jvoorhis@gmail.com>
Received: from mail-vw0-f43.google.com (mail-vw0-f43.google.com [209.85.212.43])
        by gmr-mx.google.com with ESMTP id 19si1271037qyk.5.2010.05.11.11.03.09;
        Tue, 11 May 2010 11:03:09 -0700 (PDT)
Received-SPF: pass (google.com: domain of jvoorhis@gmail.com designates 209.85.212.43 as permitted sender) client-ip=209.85.212.43;
Received: by mail-vw0-f43.google.com with SMTP id 15so2858762vws.16
        for <ruby-ffi@googlegroups.com>; Tue, 11 May 2010 11:03:09 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.229.229.82 with SMTP id jh18mr268842qcb.152.1273600989043; 
	Tue, 11 May 2010 11:03:09 -0700 (PDT)
Received: by 10.229.229.144 with HTTP; Tue, 11 May 2010 11:03:08 -0700 (PDT)
In-Reply-To: <E9A643C2-5739-4DBF-A358-94A9C8E332D5@mac.com>
References: <383FE988-D919-4629-AD7C-E115AB5315CB@mac.com>
	 <AANLkTinI-dPu4r_wHfrv3K0Cg-fvJfnB9K7-UIt56jXD@mail.gmail.com>
	 <E9A643C2-5739-4DBF-A358-94A9C8E332D5@mac.com>
Date: Tue, 11 May 2010 11:03:08 -0700
Message-ID: <AANLkTikeDDXxO31m-DCFm1ZBHhMK5pnrc8Ot1a5IasxX@mail.gmail.com>
Subject: Re: [ruby-ffi] wiki update on pointers
From: Jeremy Voorhis <jvoorhis@gmail.com>
To: ruby-ffi@googlegroups.com
X-Original-Authentication-Results: gmr-mx.google.com; spf=pass (google.com: 
	domain of jvoorhis@gmail.com designates 209.85.212.43 as permitted sender) 
	smtp.mail=jvoorhis@gmail.com; dkim=pass (test mode) header.i=@gmail.com
X-Original-Sender: jvoorhis@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, 
	<mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, 
	<mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: multipart/alternative; boundary=00163630eb09899dfb0486555685

--00163630eb09899dfb0486555685
Content-Type: text/plain; charset=UTF-8

Good point. I've created a handful of bindings using FFI, and in every case,
either the library allocated and owned its memory, or Ruby did. The one
exception to this is a current project which uses a custom pool allocator
that has a similar api to your LibC example.

Best,

Jeremy

On Tue, May 11, 2010 at 10:34 AM, Chuck Remes <cremes.devlist@mac.com>wrote:

> On May 11, 2010, at 12:01 PM, Jeremy Voorhis wrote:
>
> It looks correct to me, except in my experience, MemoryPointer makes it
> unnecessary to wrap malloc(). For example, instead of,
>   LibC.malloc(baz.first.size * baz.size)
> I would write,
>  MemoryPointer.new(baz.first.size * baz.size).
>
> The block form of MemoryPointer is also useful for automatically freeing
> the pointer when finished.
>
> MemoryPointer.new(baz.first.size * baz.size) do |p|
>  p.write_array_of_int(baz)
>  C.DoSomethingWithArrayOfInt(p)
> end
>
>
> Jeremy,
>
> I'll add a note about MemoryPointer's block form. Looks cool.
>
> BTW, you can't use MemoryPointer for the example I gave on the wiki. As
> soon as the MemoryPointer goes out of scope, it is garbage collected and the
> memory is freed. That isn't so useful when the 3rd party lib is supposed to
> own and manage the memory lifecycle going forward.
>
> But for other cases where the ruby code controls the memory lifecycle,
> MemoryPointer is a good choice.
>
> cr
>
>

--00163630eb09899dfb0486555685
Content-Type: text/html; charset=UTF-8
Content-Transfer-Encoding: quoted-printable

Good point. I&#39;ve created a handful of bindings using FFI, and in every =
case, either the library allocated and owned its memory, or Ruby did. The o=
ne exception to this is a current project which uses a custom pool allocato=
r that has a similar api to your LibC example.<div>
<br></div><div>Best,</div><div><br></div><div>Jeremy</div><div><br><div cla=
ss=3D"gmail_quote">On Tue, May 11, 2010 at 10:34 AM, Chuck Remes <span dir=
=3D"ltr">&lt;<a href=3D"mailto:cremes.devlist@mac.com">cremes.devlist@mac.c=
om</a>&gt;</span> wrote:<br>
<blockquote class=3D"gmail_quote" style=3D"margin:0 0 0 .8ex;border-left:1p=
x #ccc solid;padding-left:1ex;"><div style=3D"word-wrap:break-word"><div cl=
ass=3D"im"><div><div>On May 11, 2010, at 12:01 PM, Jeremy Voorhis wrote:</d=
iv><br>
<blockquote type=3D"cite"><font face=3D"arial, helvetica, sans-serif"><font=
 color=3D"#330033">It looks correct to me, except in my experience, MemoryP=
ointer makes it unnecessary to wrap malloc(). For example, instead of,</fon=
t></font><div>

<font face=3D"arial, helvetica, sans-serif"><font color=3D"#330033">=C2=A0=
=C2=A0</font></font><span style=3D"font-size:12px;line-height:16px;white-sp=
ace:pre"><font face=3D"arial, helvetica, sans-serif"><font color=3D"#330033=
">LibC.malloc(baz.first.size * baz.size)</font></font></span></div>

<div><span style=3D"font-family:arial, helvetica, sans-serif;font-size:12px=
;line-height:16px;white-space:pre"><font color=3D"#330033">I would write,</=
font></span></div>
<div><span style=3D"font-family:arial, helvetica, sans-serif;font-size:12px=
;line-height:16px;white-space:pre"><font color=3D"#330033">  MemoryPointer.=
new(baz.first.size * baz.size).</font></span></div>
<div><span style=3D"font-family:arial, helvetica, sans-serif;font-size:12px=
;line-height:16px;white-space:pre"><font color=3D"#330033"><br></font></spa=
n></div><div><span style=3D"font-family:arial, helvetica, sans-serif;font-s=
ize:12px;line-height:16px;white-space:pre"><font color=3D"#330033">The bloc=
k form of MemoryPointer is also useful for automatically freeing the pointe=
r when finished.</font></span></div>

<div><span style=3D"font-family:arial, helvetica, sans-serif;font-size:12px=
;line-height:16px;white-space:pre"><font color=3D"#330033"><br></font></spa=
n></div><div><font color=3D"#330033" face=3D"arial, helvetica, sans-serif" =
size=3D"3"><span style=3D"font-size:12px;line-height:16px;white-space:pre">=
MemoryPointer.new(baz.first.size * baz.size) do |p|</span></font></div>

<div><font color=3D"#330033" face=3D"arial, helvetica, sans-serif" size=3D"=
3"><span style=3D"font-size:12px;line-height:16px;white-space:pre">  p.writ=
e_array_of_int(baz)</span></font></div>
<div><font color=3D"#330033" face=3D"arial, helvetica, sans-serif" size=3D"=
3"><span style=3D"font-size:12px;line-height:16px;white-space:pre">  C.DoSo=
methingWithArrayOfInt(p)</span></font></div>
<div><font color=3D"#330033" face=3D"arial, helvetica, sans-serif" size=3D"=
3"><span style=3D"font-size:12px;line-height:16px;white-space:pre">end</spa=
n></font></div></blockquote></div><br></div><div>Jeremy,</div><div><br></di=
v><div>
I&#39;ll add a note about MemoryPointer&#39;s block form. Looks cool.</div>=
<div><br></div><div>BTW, you can&#39;t use MemoryPointer for the example I =
gave on the wiki. As soon as the MemoryPointer goes out of scope, it is gar=
bage collected and the memory is freed. That isn&#39;t so useful when the 3=
rd party lib is supposed to own and manage the memory lifecycle going forwa=
rd.</div>
<div><br></div><div>But for other cases where the ruby code controls the me=
mory lifecycle, MemoryPointer is a good choice.</div><div><br></div><div>cr=
</div><div><br></div></div>
</blockquote></div><br></div>

--00163630eb09899dfb0486555685--
