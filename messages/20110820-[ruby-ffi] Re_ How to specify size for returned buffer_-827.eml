Delivered-To: headius@headius.com
Received: by 10.14.28.203 with SMTP id g51cs39303eea;
        Sat, 20 Aug 2011 01:00:06 -0700 (PDT)
Received: by 10.236.187.9 with SMTP id x9mr1342673yhm.124.1313827206330;
        Sat, 20 Aug 2011 01:00:06 -0700 (PDT)
Return-Path: <ruby-ffi+bncCODBv_nyDBCB073yBBoEXhVNFw@googlegroups.com>
Received: from mail-gw0-f62.google.com (mail-gw0-f62.google.com [74.125.83.62])
        by mx.google.com with ESMTPS id d1si12752363yhe.7.2011.08.20.01.00.05
        (version=TLSv1/SSLv3 cipher=OTHER);
        Sat, 20 Aug 2011 01:00:06 -0700 (PDT)
Received-SPF: pass (google.com: domain of ruby-ffi+bncCODBv_nyDBCB073yBBoEXhVNFw@googlegroups.com designates 74.125.83.62 as permitted sender) client-ip=74.125.83.62;
Authentication-Results: mx.google.com; spf=pass (google.com: domain of ruby-ffi+bncCODBv_nyDBCB073yBBoEXhVNFw@googlegroups.com designates 74.125.83.62 as permitted sender) smtp.mail=ruby-ffi+bncCODBv_nyDBCB073yBBoEXhVNFw@googlegroups.com; dkim=pass (test mode) header.i=@googlegroups.com
Received: by gwj22 with SMTP id 22sf5482806gwj.7
        for <headius@headius.com>; Sat, 20 Aug 2011 01:00:05 -0700 (PDT)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=googlegroups.com; s=beta;
        h=x-beenthere:mime-version:date:in-reply-to:references:user-agent
         :x-http-useragent:message-id:subject:from:to:x-original-sender
         :x-original-authentication-results:reply-to:precedence:mailing-list
         :list-id:x-google-group-id:list-post:list-help:list-archive:sender
         :list-subscribe:list-unsubscribe:content-type
         :content-transfer-encoding;
        bh=Xdhqen4aiP7QpYwvn0udy4VLEPLAGJwmAzsMdczDUXs=;
        b=nZU9QF+5Ibo4fsBjfLo+aiMbAYEPhB74ds7Uut0+D2W8sI4HaxHpsIssM1nlYlDHVa
         UMG2QTFhSMZXYlvYJ5O5ycBsztzNdAJ6fZ9AW4e1F+1GMhdnyOqoBwhvOCB/KUmNe5nO
         YvOWKXcttj6saheP10aS9gb3ijFLrl2RoT/e8=
Received: by 10.91.7.12 with SMTP id k12mr73338agi.10.1313827201173;
        Sat, 20 Aug 2011 01:00:01 -0700 (PDT)
X-BeenThere: ruby-ffi@googlegroups.com
Received: by 10.90.22.16 with SMTP id 16ls15855648agv.7.gmail; Sat, 20 Aug
 2011 00:59:58 -0700 (PDT)
MIME-Version: 1.0
Received: by 10.91.57.12 with SMTP id j12mr60490agk.54.1313827198226; Sat, 20
 Aug 2011 00:59:58 -0700 (PDT)
Received: by e10g2000yqo.googlegroups.com with HTTP; Sat, 20 Aug 2011 00:59:58
 -0700 (PDT)
Date: Sat, 20 Aug 2011 00:59:58 -0700 (PDT)
In-Reply-To: <ddd2bf7b-ecd4-4cea-9694-721194d096a8@p5g2000vbl.googlegroups.com>
References: <ddd2bf7b-ecd4-4cea-9694-721194d096a8@p5g2000vbl.googlegroups.com>
User-Agent: G2/1.0
X-HTTP-UserAgent: Mozilla/5.0 (X11; Linux i686; rv:9.0a1) Gecko/20110819 Firefox/9.0a1,gzip(gfe)
Message-ID: <b76446bf-a514-4611-8212-b3e76847e410@e10g2000yqo.googlegroups.com>
Subject: [ruby-ffi] Re: How to specify size for returned buffer?
From: przemo_li <an.przemek@gmail.com>
To: ruby-ffi <ruby-ffi@googlegroups.com>
X-Original-Sender: an.przemek@gmail.com
X-Original-Authentication-Results: ls.google.com; spf=pass (google.com: domain of
 an.przemek@gmail.com designates internal as permitted sender)
 smtp.mail=an.przemek@gmail.com; dkim=pass
 header.i=@gmail.com
Reply-To: ruby-ffi@googlegroups.com
Precedence: list
Mailing-list: list ruby-ffi@googlegroups.com; contact ruby-ffi+owners@googlegroups.com
List-ID: <ruby-ffi.googlegroups.com>
X-Google-Group-Id: 238405446264
List-Post: <http://groups.google.com/group/ruby-ffi/post?hl=en_US>, <mailto:ruby-ffi@googlegroups.com>
List-Help: <http://groups.google.com/support/?hl=en_US>, <mailto:ruby-ffi+help@googlegroups.com>
List-Archive: <http://groups.google.com/group/ruby-ffi?hl=en_US>
Sender: ruby-ffi@googlegroups.com
List-Subscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>, <mailto:ruby-ffi+subscribe@googlegroups.com>
List-Unsubscribe: <http://groups.google.com/group/ruby-ffi/subscribe?hl=en_US>,
 <mailto:ruby-ffi+unsubscribe@googlegroups.com>
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: quoted-printable

Why do you need "buffer" having ".size". Cant you pack both variables
into class instance that do "anything" you want buffer to do?
You know Ruby FFI to extract data, Ruby Class to encapsulate it and
add
custom behavior.

On 20 Sie, 06:57, cfis <c...@savagexi.com> wrote:
> I'm trying to wrap FreeImage (http://freeimage.sourceforge.net/) and
> it has this function:
>
> DLL_API BOOL DLL_CALLCONV FreeImage_AcquireMemory(FIMEMORY *stream,
> BYTE **data, DWORD *size_in_bytes);
>
> The way this works is you hand FreeImage a pointer (data) which it
> then allocates memory for and returns the size in the size_in_bytes
> out parameter. =A0I've attached example C code from the FreeImage docs
> in case it helps.
>
> So I'm not sure how to wrap this function. =A0So far I have this:
>
> FreeImage.attach_function('FreeImage_AcquireMemory',
> [:pointer, :pointer, :uint], :bool)
>
> buffer =3D MemoryPointer.new(:pointer)
> size_ptr =3D MemoryPointer.new(:uint)
> FreeImage.FreeImage_AcquireMemory(self, buffer, size);
>
> What I would then like to do is something like:
>
> buffer.size =3D size_ptr.read_pointer()
>
> But buffer doesn't have any such API.
>
> Any help appreciated.
>
> Thanks,
>
> Charlie
> ------------
> void testAcquireMemIO(const char *lpszPathName) {
> =A0 FIMEMORY *hmem =3D NULL;
> =A0 // load a regular file
> =A0 FREE_IMAGE_FORMAT fif =3D FreeImage_GetFileType(lpszPathName);
> =A0 FIBITMAP *dib =3D FreeImage_Load(fif, lpszPathName, 0);
>
> =A0 // open and allocate a memory stream
> =A0 hmem =3D FreeImage_OpenMemory();
>
> =A0 // save the image to a memory stream
> =A0 FreeImage_SaveToMemory(FIF_PNG, dib, hmem, PNG_DEFAULT);
> =A0 FreeImage_Unload(dib);
>
> =A0 // get the buffer from the memory stream
> =A0 BYTE *mem_buffer =3D NULL;
> =A0 DWORD size_in_bytes =3D 0;
> =A0 FreeImage_AcquireMemory(hmem, &mem_buffer, &size_in_bytes);
>
> =A0 // save the buffer to a file stream
> =A0 FILE *stream =3D fopen("buffer.png", "wb");
> =A0 if(stream) {
> =A0 =A0 fwrite(mem_buffer, sizeof(BYTE), size_in_bytes, stream);
> =A0 =A0 fclose(stream);
> =A0 }
> =A0 // close and free the memory stream
> =A0 FreeImage_CloseMemory(hmem);
>
>
>
>
>
>
>
> }
